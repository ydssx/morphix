"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.quote.v1.quote_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class QuoteServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateQuote: grpc.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.CreateQuoteRequest,
        api.quote.v1.quote_pb2.CreateQuoteResponse,
    ]
    """创建报价"""
    GetQuotes: grpc.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.GetQuotesRequest,
        api.quote.v1.quote_pb2.GetQuotesResponse,
    ]
    """获取报价列表"""
    GetQuote: grpc.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.GetQuoteRequest,
        api.quote.v1.quote_pb2.Quote,
    ]
    """获取单个报价"""
    GetUserCoupons: grpc.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.GetUserCouponsRequest,
        api.quote.v1.quote_pb2.GetUserCouponsResponse,
    ]
    """获取用户拥有的优惠券列表"""
    UseCoupon: grpc.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.UseCouponRequest,
        api.quote.v1.quote_pb2.UseCouponResponse,
    ]
    """使用优惠券"""

class QuoteServiceAsyncStub:
    CreateQuote: grpc.aio.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.CreateQuoteRequest,
        api.quote.v1.quote_pb2.CreateQuoteResponse,
    ]
    """创建报价"""
    GetQuotes: grpc.aio.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.GetQuotesRequest,
        api.quote.v1.quote_pb2.GetQuotesResponse,
    ]
    """获取报价列表"""
    GetQuote: grpc.aio.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.GetQuoteRequest,
        api.quote.v1.quote_pb2.Quote,
    ]
    """获取单个报价"""
    GetUserCoupons: grpc.aio.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.GetUserCouponsRequest,
        api.quote.v1.quote_pb2.GetUserCouponsResponse,
    ]
    """获取用户拥有的优惠券列表"""
    UseCoupon: grpc.aio.UnaryUnaryMultiCallable[
        api.quote.v1.quote_pb2.UseCouponRequest,
        api.quote.v1.quote_pb2.UseCouponResponse,
    ]
    """使用优惠券"""

class QuoteServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateQuote(
        self,
        request: api.quote.v1.quote_pb2.CreateQuoteRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.quote.v1.quote_pb2.CreateQuoteResponse, collections.abc.Awaitable[api.quote.v1.quote_pb2.CreateQuoteResponse]]:
        """创建报价"""
    @abc.abstractmethod
    def GetQuotes(
        self,
        request: api.quote.v1.quote_pb2.GetQuotesRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.quote.v1.quote_pb2.GetQuotesResponse, collections.abc.Awaitable[api.quote.v1.quote_pb2.GetQuotesResponse]]:
        """获取报价列表"""
    @abc.abstractmethod
    def GetQuote(
        self,
        request: api.quote.v1.quote_pb2.GetQuoteRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.quote.v1.quote_pb2.Quote, collections.abc.Awaitable[api.quote.v1.quote_pb2.Quote]]:
        """获取单个报价"""
    @abc.abstractmethod
    def GetUserCoupons(
        self,
        request: api.quote.v1.quote_pb2.GetUserCouponsRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.quote.v1.quote_pb2.GetUserCouponsResponse, collections.abc.Awaitable[api.quote.v1.quote_pb2.GetUserCouponsResponse]]:
        """获取用户拥有的优惠券列表"""
    @abc.abstractmethod
    def UseCoupon(
        self,
        request: api.quote.v1.quote_pb2.UseCouponRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.quote.v1.quote_pb2.UseCouponResponse, collections.abc.Awaitable[api.quote.v1.quote_pb2.UseCouponResponse]]:
        """使用优惠券"""

def add_QuoteServiceServicer_to_server(servicer: QuoteServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
