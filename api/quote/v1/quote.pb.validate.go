// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/quote/v1/quote.proto

package quotev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CouponMultiError, or nil if none found.
func (m *Coupon) ValidateAll() error {
	return m.validate(true)
}

func (m *Coupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for DiscountType

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CouponMultiError(errors)
	}

	return nil
}

// CouponMultiError is an error wrapping multiple validation errors returned by
// Coupon.ValidateAll() if the designated constraints aren't met.
type CouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponMultiError) AllErrors() []error { return m }

// CouponValidationError is the validation error returned by Coupon.Validate if
// the designated constraints aren't met.
type CouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponValidationError) ErrorName() string { return "CouponValidationError" }

// Error satisfies the builtin error interface
func (e CouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponValidationError{}

// Validate checks the field values on Quote with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quote with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QuoteMultiError, or nil if none found.
func (m *Quote) ValidateAll() error {
	return m.validate(true)
}

func (m *Quote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductId

	// no validation rules for BasePrice

	// no validation rules for FinalPrice

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuoteValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuoteValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuoteValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CustomerInfo

	if len(errors) > 0 {
		return QuoteMultiError(errors)
	}

	return nil
}

// QuoteMultiError is an error wrapping multiple validation errors returned by
// Quote.ValidateAll() if the designated constraints aren't met.
type QuoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuoteMultiError) AllErrors() []error { return m }

// QuoteValidationError is the validation error returned by Quote.Validate if
// the designated constraints aren't met.
type QuoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuoteValidationError) ErrorName() string { return "QuoteValidationError" }

// Error satisfies the builtin error interface
func (e QuoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuoteValidationError{}

// Validate checks the field values on CreateQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQuoteRequestMultiError, or nil if none found.
func (m *CreateQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for BasePrice

	// no validation rules for CustomerInfo

	// no validation rules for CouponCode

	if len(errors) > 0 {
		return CreateQuoteRequestMultiError(errors)
	}

	return nil
}

// CreateQuoteRequestMultiError is an error wrapping multiple validation errors
// returned by CreateQuoteRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuoteRequestMultiError) AllErrors() []error { return m }

// CreateQuoteRequestValidationError is the validation error returned by
// CreateQuoteRequest.Validate if the designated constraints aren't met.
type CreateQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuoteRequestValidationError) ErrorName() string {
	return "CreateQuoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuoteRequestValidationError{}

// Validate checks the field values on CreateQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQuoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQuoteResponseMultiError, or nil if none found.
func (m *CreateQuoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateQuoteResponseMultiError(errors)
	}

	return nil
}

// CreateQuoteResponseMultiError is an error wrapping multiple validation
// errors returned by CreateQuoteResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateQuoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuoteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuoteResponseMultiError) AllErrors() []error { return m }

// CreateQuoteResponseValidationError is the validation error returned by
// CreateQuoteResponse.Validate if the designated constraints aren't met.
type CreateQuoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuoteResponseValidationError) ErrorName() string {
	return "CreateQuoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuoteResponseValidationError{}

// Validate checks the field values on GetQuotesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQuotesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotesRequestMultiError, or nil if none found.
func (m *GetQuotesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateRangeStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuotesRequestValidationError{
					field:  "DateRangeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuotesRequestValidationError{
					field:  "DateRangeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateRangeStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuotesRequestValidationError{
				field:  "DateRangeStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateRangeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQuotesRequestValidationError{
					field:  "DateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQuotesRequestValidationError{
					field:  "DateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateRangeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuotesRequestValidationError{
				field:  "DateRangeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetQuotesRequestMultiError(errors)
	}

	return nil
}

// GetQuotesRequestMultiError is an error wrapping multiple validation errors
// returned by GetQuotesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetQuotesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotesRequestMultiError) AllErrors() []error { return m }

// GetQuotesRequestValidationError is the validation error returned by
// GetQuotesRequest.Validate if the designated constraints aren't met.
type GetQuotesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotesRequestValidationError) ErrorName() string { return "GetQuotesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetQuotesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotesRequestValidationError{}

// Validate checks the field values on GetQuotesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQuotesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotesResponseMultiError, or nil if none found.
func (m *GetQuotesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetQuotesResponseValidationError{
						field:  fmt.Sprintf("Quotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetQuotesResponseValidationError{
						field:  fmt.Sprintf("Quotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuotesResponseValidationError{
					field:  fmt.Sprintf("Quotes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetQuotesResponseMultiError(errors)
	}

	return nil
}

// GetQuotesResponseMultiError is an error wrapping multiple validation errors
// returned by GetQuotesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetQuotesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotesResponseMultiError) AllErrors() []error { return m }

// GetQuotesResponseValidationError is the validation error returned by
// GetQuotesResponse.Validate if the designated constraints aren't met.
type GetQuotesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotesResponseValidationError) ErrorName() string {
	return "GetQuotesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuotesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotesResponseValidationError{}

// Validate checks the field values on GetQuoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuoteRequestMultiError, or nil if none found.
func (m *GetQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetQuoteRequestMultiError(errors)
	}

	return nil
}

// GetQuoteRequestMultiError is an error wrapping multiple validation errors
// returned by GetQuoteRequest.ValidateAll() if the designated constraints
// aren't met.
type GetQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuoteRequestMultiError) AllErrors() []error { return m }

// GetQuoteRequestValidationError is the validation error returned by
// GetQuoteRequest.Validate if the designated constraints aren't met.
type GetQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuoteRequestValidationError) ErrorName() string { return "GetQuoteRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuoteRequestValidationError{}

// Validate checks the field values on GetUserCouponsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCouponsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCouponsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCouponsRequestMultiError, or nil if none found.
func (m *GetUserCouponsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCouponsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CouponStatus

	if all {
		switch v := interface{}(m.GetDateRangeStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserCouponsRequestValidationError{
					field:  "DateRangeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserCouponsRequestValidationError{
					field:  "DateRangeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateRangeStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserCouponsRequestValidationError{
				field:  "DateRangeStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateRangeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserCouponsRequestValidationError{
					field:  "DateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserCouponsRequestValidationError{
					field:  "DateRangeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateRangeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserCouponsRequestValidationError{
				field:  "DateRangeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserCouponsRequestMultiError(errors)
	}

	return nil
}

// GetUserCouponsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserCouponsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserCouponsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCouponsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCouponsRequestMultiError) AllErrors() []error { return m }

// GetUserCouponsRequestValidationError is the validation error returned by
// GetUserCouponsRequest.Validate if the designated constraints aren't met.
type GetUserCouponsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCouponsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCouponsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCouponsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCouponsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCouponsRequestValidationError) ErrorName() string {
	return "GetUserCouponsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCouponsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCouponsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCouponsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCouponsRequestValidationError{}

// Validate checks the field values on GetUserCouponsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCouponsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCouponsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCouponsResponseMultiError, or nil if none found.
func (m *GetUserCouponsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCouponsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserCouponsResponseValidationError{
						field:  fmt.Sprintf("UserCoupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserCouponsResponseValidationError{
						field:  fmt.Sprintf("UserCoupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserCouponsResponseValidationError{
					field:  fmt.Sprintf("UserCoupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserCouponsResponseMultiError(errors)
	}

	return nil
}

// GetUserCouponsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserCouponsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserCouponsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCouponsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCouponsResponseMultiError) AllErrors() []error { return m }

// GetUserCouponsResponseValidationError is the validation error returned by
// GetUserCouponsResponse.Validate if the designated constraints aren't met.
type GetUserCouponsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCouponsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCouponsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCouponsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCouponsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCouponsResponseValidationError) ErrorName() string {
	return "GetUserCouponsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCouponsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCouponsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCouponsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCouponsResponseValidationError{}

// Validate checks the field values on UserCoupon with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserCoupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCoupon with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserCouponMultiError, or
// nil if none found.
func (m *UserCoupon) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCoupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponId

	// no validation rules for DiscountType

	// no validation rules for DiscountValue

	// no validation rules for Used

	if all {
		switch v := interface{}(m.GetUsedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCouponValidationError{
					field:  "UsedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCouponValidationError{
					field:  "UsedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCouponValidationError{
				field:  "UsedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCouponMultiError(errors)
	}

	return nil
}

// UserCouponMultiError is an error wrapping multiple validation errors
// returned by UserCoupon.ValidateAll() if the designated constraints aren't met.
type UserCouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCouponMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCouponMultiError) AllErrors() []error { return m }

// UserCouponValidationError is the validation error returned by
// UserCoupon.Validate if the designated constraints aren't met.
type UserCouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCouponValidationError) ErrorName() string { return "UserCouponValidationError" }

// Error satisfies the builtin error interface
func (e UserCouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCouponValidationError{}

// Validate checks the field values on UseCouponRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UseCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseCouponRequestMultiError, or nil if none found.
func (m *UseCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UseCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CouponId

	if len(errors) > 0 {
		return UseCouponRequestMultiError(errors)
	}

	return nil
}

// UseCouponRequestMultiError is an error wrapping multiple validation errors
// returned by UseCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type UseCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseCouponRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseCouponRequestMultiError) AllErrors() []error { return m }

// UseCouponRequestValidationError is the validation error returned by
// UseCouponRequest.Validate if the designated constraints aren't met.
type UseCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseCouponRequestValidationError) ErrorName() string { return "UseCouponRequestValidationError" }

// Error satisfies the builtin error interface
func (e UseCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseCouponRequestValidationError{}

// Validate checks the field values on UseCouponResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UseCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseCouponResponseMultiError, or nil if none found.
func (m *UseCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UseCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UseCouponResponseMultiError(errors)
	}

	return nil
}

// UseCouponResponseMultiError is an error wrapping multiple validation errors
// returned by UseCouponResponse.ValidateAll() if the designated constraints
// aren't met.
type UseCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseCouponResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseCouponResponseMultiError) AllErrors() []error { return m }

// UseCouponResponseValidationError is the validation error returned by
// UseCouponResponse.Validate if the designated constraints aren't met.
type UseCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseCouponResponseValidationError) ErrorName() string {
	return "UseCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UseCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseCouponResponseValidationError{}
