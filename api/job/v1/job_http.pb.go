// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: api/job/v1/job.proto

package jobv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationJobServiceQueryTasks = "/job.v1.JobService/QueryTasks"

type JobServiceHTTPServer interface {
	QueryTasks(context.Context, *QueryTasksRequest) (*QueryTasksResponse, error)
}

func RegisterJobServiceHTTPServer(s *http.Server, srv JobServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/tasks/query", _JobService_QueryTasks0_HTTP_Handler(srv))
}

func _JobService_QueryTasks0_HTTP_Handler(srv JobServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryTasksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJobServiceQueryTasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryTasks(ctx, req.(*QueryTasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryTasksResponse)
		return ctx.Result(200, reply)
	}
}

type JobServiceHTTPClient interface {
	QueryTasks(ctx context.Context, req *QueryTasksRequest, opts ...http.CallOption) (rsp *QueryTasksResponse, err error)
}

type JobServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewJobServiceHTTPClient(client *http.Client) JobServiceHTTPClient {
	return &JobServiceHTTPClientImpl{client}
}

func (c *JobServiceHTTPClientImpl) QueryTasks(ctx context.Context, in *QueryTasksRequest, opts ...http.CallOption) (*QueryTasksResponse, error) {
	var out QueryTasksResponse
	pattern := "/api/tasks/query"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationJobServiceQueryTasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
