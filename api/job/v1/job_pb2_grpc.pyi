"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.job.v1.job_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class JobServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Enqueue: grpc.UnaryUnaryMultiCallable[
        api.job.v1.job_pb2.EnqueueRequest,
        api.job.v1.job_pb2.EnqueueResponse,
    ]
    """Enqueue a job"""
    QueryTasks: grpc.UnaryUnaryMultiCallable[
        api.job.v1.job_pb2.QueryTasksRequest,
        api.job.v1.job_pb2.QueryTasksResponse,
    ]

class JobServiceAsyncStub:
    Enqueue: grpc.aio.UnaryUnaryMultiCallable[
        api.job.v1.job_pb2.EnqueueRequest,
        api.job.v1.job_pb2.EnqueueResponse,
    ]
    """Enqueue a job"""
    QueryTasks: grpc.aio.UnaryUnaryMultiCallable[
        api.job.v1.job_pb2.QueryTasksRequest,
        api.job.v1.job_pb2.QueryTasksResponse,
    ]

class JobServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Enqueue(
        self,
        request: api.job.v1.job_pb2.EnqueueRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.job.v1.job_pb2.EnqueueResponse, collections.abc.Awaitable[api.job.v1.job_pb2.EnqueueResponse]]:
        """Enqueue a job"""
    @abc.abstractmethod
    def QueryTasks(
        self,
        request: api.job.v1.job_pb2.QueryTasksRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.job.v1.job_pb2.QueryTasksResponse, collections.abc.Awaitable[api.job.v1.job_pb2.QueryTasksResponse]]: ...

def add_JobServiceServicer_to_server(servicer: JobServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
