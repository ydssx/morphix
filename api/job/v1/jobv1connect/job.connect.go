// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/job/v1/job.proto

package jobv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ydssx/morphix/api/job/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "job.v1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceEnqueueProcedure is the fully-qualified name of the JobService's Enqueue RPC.
	JobServiceEnqueueProcedure = "/job.v1.JobService/Enqueue"
	// JobServiceQueryTasksProcedure is the fully-qualified name of the JobService's QueryTasks RPC.
	JobServiceQueryTasksProcedure = "/job.v1.JobService/QueryTasks"
)

// JobServiceClient is a client for the job.v1.JobService service.
type JobServiceClient interface {
	// Enqueue a job
	Enqueue(context.Context, *connect_go.Request[v1.EnqueueRequest]) (*connect_go.Response[v1.EnqueueResponse], error)
	QueryTasks(context.Context, *connect_go.Request[v1.QueryTasksRequest]) (*connect_go.Response[v1.QueryTasksResponse], error)
}

// NewJobServiceClient constructs a client for the job.v1.JobService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jobServiceClient{
		enqueue: connect_go.NewClient[v1.EnqueueRequest, v1.EnqueueResponse](
			httpClient,
			baseURL+JobServiceEnqueueProcedure,
			opts...,
		),
		queryTasks: connect_go.NewClient[v1.QueryTasksRequest, v1.QueryTasksResponse](
			httpClient,
			baseURL+JobServiceQueryTasksProcedure,
			opts...,
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	enqueue    *connect_go.Client[v1.EnqueueRequest, v1.EnqueueResponse]
	queryTasks *connect_go.Client[v1.QueryTasksRequest, v1.QueryTasksResponse]
}

// Enqueue calls job.v1.JobService.Enqueue.
func (c *jobServiceClient) Enqueue(ctx context.Context, req *connect_go.Request[v1.EnqueueRequest]) (*connect_go.Response[v1.EnqueueResponse], error) {
	return c.enqueue.CallUnary(ctx, req)
}

// QueryTasks calls job.v1.JobService.QueryTasks.
func (c *jobServiceClient) QueryTasks(ctx context.Context, req *connect_go.Request[v1.QueryTasksRequest]) (*connect_go.Response[v1.QueryTasksResponse], error) {
	return c.queryTasks.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the job.v1.JobService service.
type JobServiceHandler interface {
	// Enqueue a job
	Enqueue(context.Context, *connect_go.Request[v1.EnqueueRequest]) (*connect_go.Response[v1.EnqueueResponse], error)
	QueryTasks(context.Context, *connect_go.Request[v1.QueryTasksRequest]) (*connect_go.Response[v1.QueryTasksResponse], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	jobServiceEnqueueHandler := connect_go.NewUnaryHandler(
		JobServiceEnqueueProcedure,
		svc.Enqueue,
		opts...,
	)
	jobServiceQueryTasksHandler := connect_go.NewUnaryHandler(
		JobServiceQueryTasksProcedure,
		svc.QueryTasks,
		opts...,
	)
	return "/job.v1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceEnqueueProcedure:
			jobServiceEnqueueHandler.ServeHTTP(w, r)
		case JobServiceQueryTasksProcedure:
			jobServiceQueryTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) Enqueue(context.Context, *connect_go.Request[v1.EnqueueRequest]) (*connect_go.Response[v1.EnqueueResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("job.v1.JobService.Enqueue is not implemented"))
}

func (UnimplementedJobServiceHandler) QueryTasks(context.Context, *connect_go.Request[v1.QueryTasksRequest]) (*connect_go.Response[v1.QueryTasksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("job.v1.JobService.QueryTasks is not implemented"))
}
