"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.chat.v1.chat_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ChatServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    SendMessage: grpc.StreamUnaryMultiCallable[
        api.chat.v1.chat_pb2.ClientMessage,
        api.chat.v1.chat_pb2.ServerMessage,
    ]
    """客户端到服务器的流，用于发送消息"""
    Chat: grpc.StreamStreamMultiCallable[
        api.chat.v1.chat_pb2.ChatMessage,
        api.chat.v1.chat_pb2.ChatMessage,
    ]
    """双向流，用于实现聊天"""
    ReceiveMessage: grpc.UnaryStreamMultiCallable[
        api.chat.v1.chat_pb2.ClientMessage,
        api.chat.v1.chat_pb2.ServerMessage,
    ]
    """服务器到客户端的流，用于接收消息"""

class ChatServiceAsyncStub:
    SendMessage: grpc.aio.StreamUnaryMultiCallable[
        api.chat.v1.chat_pb2.ClientMessage,
        api.chat.v1.chat_pb2.ServerMessage,
    ]
    """客户端到服务器的流，用于发送消息"""
    Chat: grpc.aio.StreamStreamMultiCallable[
        api.chat.v1.chat_pb2.ChatMessage,
        api.chat.v1.chat_pb2.ChatMessage,
    ]
    """双向流，用于实现聊天"""
    ReceiveMessage: grpc.aio.UnaryStreamMultiCallable[
        api.chat.v1.chat_pb2.ClientMessage,
        api.chat.v1.chat_pb2.ServerMessage,
    ]
    """服务器到客户端的流，用于接收消息"""

class ChatServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def SendMessage(
        self,
        request_iterator: _MaybeAsyncIterator[api.chat.v1.chat_pb2.ClientMessage],
        context: _ServicerContext,
    ) -> typing.Union[api.chat.v1.chat_pb2.ServerMessage, collections.abc.Awaitable[api.chat.v1.chat_pb2.ServerMessage]]:
        """客户端到服务器的流，用于发送消息"""
    @abc.abstractmethod
    def Chat(
        self,
        request_iterator: _MaybeAsyncIterator[api.chat.v1.chat_pb2.ChatMessage],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[api.chat.v1.chat_pb2.ChatMessage], collections.abc.AsyncIterator[api.chat.v1.chat_pb2.ChatMessage]]:
        """双向流，用于实现聊天"""
    @abc.abstractmethod
    def ReceiveMessage(
        self,
        request: api.chat.v1.chat_pb2.ClientMessage,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[api.chat.v1.chat_pb2.ServerMessage], collections.abc.AsyncIterator[api.chat.v1.chat_pb2.ServerMessage]]:
        """服务器到客户端的流，用于接收消息"""

def add_ChatServiceServicer_to_server(servicer: ChatServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
