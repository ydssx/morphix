// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/aiart/v1/aiart.proto

package aiartv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtService_GenerateImage_FullMethodName     = "/aiartv1.ArtService/GenerateImage"
	ArtService_GetGenerateStatus_FullMethodName = "/aiartv1.ArtService/GetGenerateStatus"
	ArtService_GetGeneratedImage_FullMethodName = "/aiartv1.ArtService/GetGeneratedImage"
	ArtService_GetModelInfo_FullMethodName      = "/aiartv1.ArtService/GetModelInfo"
	ArtService_ImageToImage_FullMethodName      = "/aiartv1.ArtService/ImageToImage"
)

// ArtServiceClient is the client API for ArtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtServiceClient interface {
	// 生成图像
	GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error)
	// 获取生成任务状态
	GetGenerateStatus(ctx context.Context, in *GetGenerateStatusRequest, opts ...grpc.CallOption) (*GenerateStatusResponse, error)
	// 获取已生成的图像
	GetGeneratedImage(ctx context.Context, in *GetGeneratedImageRequest, opts ...grpc.CallOption) (*GetGeneratedImageResponse, error)
	// 获取模型信息
	GetModelInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetModelInfoResponse, error)
	ImageToImage(ctx context.Context, in *ImageToImageRequest, opts ...grpc.CallOption) (*ImageToImageResponse, error)
}

type artServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtServiceClient(cc grpc.ClientConnInterface) ArtServiceClient {
	return &artServiceClient{cc}
}

func (c *artServiceClient) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...grpc.CallOption) (*GenerateImageResponse, error) {
	out := new(GenerateImageResponse)
	err := c.cc.Invoke(ctx, ArtService_GenerateImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artServiceClient) GetGenerateStatus(ctx context.Context, in *GetGenerateStatusRequest, opts ...grpc.CallOption) (*GenerateStatusResponse, error) {
	out := new(GenerateStatusResponse)
	err := c.cc.Invoke(ctx, ArtService_GetGenerateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artServiceClient) GetGeneratedImage(ctx context.Context, in *GetGeneratedImageRequest, opts ...grpc.CallOption) (*GetGeneratedImageResponse, error) {
	out := new(GetGeneratedImageResponse)
	err := c.cc.Invoke(ctx, ArtService_GetGeneratedImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artServiceClient) GetModelInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetModelInfoResponse, error) {
	out := new(GetModelInfoResponse)
	err := c.cc.Invoke(ctx, ArtService_GetModelInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artServiceClient) ImageToImage(ctx context.Context, in *ImageToImageRequest, opts ...grpc.CallOption) (*ImageToImageResponse, error) {
	out := new(ImageToImageResponse)
	err := c.cc.Invoke(ctx, ArtService_ImageToImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtServiceServer is the server API for ArtService service.
// All implementations should embed UnimplementedArtServiceServer
// for forward compatibility
type ArtServiceServer interface {
	// 生成图像
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	// 获取生成任务状态
	GetGenerateStatus(context.Context, *GetGenerateStatusRequest) (*GenerateStatusResponse, error)
	// 获取已生成的图像
	GetGeneratedImage(context.Context, *GetGeneratedImageRequest) (*GetGeneratedImageResponse, error)
	// 获取模型信息
	GetModelInfo(context.Context, *emptypb.Empty) (*GetModelInfoResponse, error)
	ImageToImage(context.Context, *ImageToImageRequest) (*ImageToImageResponse, error)
}

// UnimplementedArtServiceServer should be embedded to have forward compatible implementations.
type UnimplementedArtServiceServer struct {
}

func (UnimplementedArtServiceServer) GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImage not implemented")
}
func (UnimplementedArtServiceServer) GetGenerateStatus(context.Context, *GetGenerateStatusRequest) (*GenerateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenerateStatus not implemented")
}
func (UnimplementedArtServiceServer) GetGeneratedImage(context.Context, *GetGeneratedImageRequest) (*GetGeneratedImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneratedImage not implemented")
}
func (UnimplementedArtServiceServer) GetModelInfo(context.Context, *emptypb.Empty) (*GetModelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedArtServiceServer) ImageToImage(context.Context, *ImageToImageRequest) (*ImageToImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageToImage not implemented")
}

// UnsafeArtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtServiceServer will
// result in compilation errors.
type UnsafeArtServiceServer interface {
	mustEmbedUnimplementedArtServiceServer()
}

func RegisterArtServiceServer(s grpc.ServiceRegistrar, srv ArtServiceServer) {
	s.RegisterService(&ArtService_ServiceDesc, srv)
}

func _ArtService_GenerateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtServiceServer).GenerateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtService_GenerateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtServiceServer).GenerateImage(ctx, req.(*GenerateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtService_GetGenerateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenerateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtServiceServer).GetGenerateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtService_GetGenerateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtServiceServer).GetGenerateStatus(ctx, req.(*GetGenerateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtService_GetGeneratedImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneratedImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtServiceServer).GetGeneratedImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtService_GetGeneratedImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtServiceServer).GetGeneratedImage(ctx, req.(*GetGeneratedImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtService_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtServiceServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtService_GetModelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtServiceServer).GetModelInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtService_ImageToImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageToImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtServiceServer).ImageToImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtService_ImageToImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtServiceServer).ImageToImage(ctx, req.(*ImageToImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtService_ServiceDesc is the grpc.ServiceDesc for ArtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aiartv1.ArtService",
	HandlerType: (*ArtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateImage",
			Handler:    _ArtService_GenerateImage_Handler,
		},
		{
			MethodName: "GetGenerateStatus",
			Handler:    _ArtService_GetGenerateStatus_Handler,
		},
		{
			MethodName: "GetGeneratedImage",
			Handler:    _ArtService_GetGeneratedImage_Handler,
		},
		{
			MethodName: "GetModelInfo",
			Handler:    _ArtService_GetModelInfo_Handler,
		},
		{
			MethodName: "ImageToImage",
			Handler:    _ArtService_ImageToImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/aiart/v1/aiart.proto",
}
