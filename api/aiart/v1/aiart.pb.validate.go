// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/aiart/v1/aiart.proto

package aiartv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateImageRequestMultiError, or nil if none found.
func (m *GenerateImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalImage

	// no validation rules for Prompt

	// no validation rules for ImageSize

	// no validation rules for GuidanceScale

	if all {
		switch v := interface{}(m.GetGenerationParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateImageRequestValidationError{
					field:  "GenerationParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateImageRequestValidationError{
					field:  "GenerationParameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGenerationParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateImageRequestValidationError{
				field:  "GenerationParameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateImageRequestMultiError(errors)
	}

	return nil
}

// GenerateImageRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateImageRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateImageRequestMultiError) AllErrors() []error { return m }

// GenerateImageRequestValidationError is the validation error returned by
// GenerateImageRequest.Validate if the designated constraints aren't met.
type GenerateImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateImageRequestValidationError) ErrorName() string {
	return "GenerateImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateImageRequestValidationError{}

// Validate checks the field values on GenerateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateImageResponseMultiError, or nil if none found.
func (m *GenerateImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageId

	if len(errors) > 0 {
		return GenerateImageResponseMultiError(errors)
	}

	return nil
}

// GenerateImageResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateImageResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateImageResponseMultiError) AllErrors() []error { return m }

// GenerateImageResponseValidationError is the validation error returned by
// GenerateImageResponse.Validate if the designated constraints aren't met.
type GenerateImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateImageResponseValidationError) ErrorName() string {
	return "GenerateImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateImageResponseValidationError{}

// Validate checks the field values on GenerationParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerationParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerationParameters with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerationParametersMultiError, or nil if none found.
func (m *GenerationParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerationParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelName

	// no validation rules for SamplingSteps

	// no validation rules for SamplingMethod

	if len(errors) > 0 {
		return GenerationParametersMultiError(errors)
	}

	return nil
}

// GenerationParametersMultiError is an error wrapping multiple validation
// errors returned by GenerationParameters.ValidateAll() if the designated
// constraints aren't met.
type GenerationParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerationParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerationParametersMultiError) AllErrors() []error { return m }

// GenerationParametersValidationError is the validation error returned by
// GenerationParameters.Validate if the designated constraints aren't met.
type GenerationParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerationParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerationParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerationParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerationParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerationParametersValidationError) ErrorName() string {
	return "GenerationParametersValidationError"
}

// Error satisfies the builtin error interface
func (e GenerationParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerationParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerationParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerationParametersValidationError{}

// Validate checks the field values on GetGenerateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGenerateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGenerateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGenerateStatusRequestMultiError, or nil if none found.
func (m *GetGenerateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGenerateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageId

	if len(errors) > 0 {
		return GetGenerateStatusRequestMultiError(errors)
	}

	return nil
}

// GetGenerateStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetGenerateStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGenerateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGenerateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGenerateStatusRequestMultiError) AllErrors() []error { return m }

// GetGenerateStatusRequestValidationError is the validation error returned by
// GetGenerateStatusRequest.Validate if the designated constraints aren't met.
type GetGenerateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGenerateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGenerateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGenerateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGenerateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGenerateStatusRequestValidationError) ErrorName() string {
	return "GetGenerateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGenerateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGenerateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGenerateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGenerateStatusRequestValidationError{}

// Validate checks the field values on GenerateStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateStatusResponseMultiError, or nil if none found.
func (m *GenerateStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GenerateStatusResponseMultiError(errors)
	}

	return nil
}

// GenerateStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStatusResponseMultiError) AllErrors() []error { return m }

// GenerateStatusResponseValidationError is the validation error returned by
// GenerateStatusResponse.Validate if the designated constraints aren't met.
type GenerateStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStatusResponseValidationError) ErrorName() string {
	return "GenerateStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStatusResponseValidationError{}

// Validate checks the field values on GetGeneratedImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGeneratedImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGeneratedImageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGeneratedImageRequestMultiError, or nil if none found.
func (m *GetGeneratedImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGeneratedImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageId

	if len(errors) > 0 {
		return GetGeneratedImageRequestMultiError(errors)
	}

	return nil
}

// GetGeneratedImageRequestMultiError is an error wrapping multiple validation
// errors returned by GetGeneratedImageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGeneratedImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGeneratedImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGeneratedImageRequestMultiError) AllErrors() []error { return m }

// GetGeneratedImageRequestValidationError is the validation error returned by
// GetGeneratedImageRequest.Validate if the designated constraints aren't met.
type GetGeneratedImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGeneratedImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGeneratedImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGeneratedImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGeneratedImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGeneratedImageRequestValidationError) ErrorName() string {
	return "GetGeneratedImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGeneratedImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGeneratedImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGeneratedImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGeneratedImageRequestValidationError{}

// Validate checks the field values on GetGeneratedImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGeneratedImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGeneratedImageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGeneratedImageResponseMultiError, or nil if none found.
func (m *GetGeneratedImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGeneratedImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageData

	if len(errors) > 0 {
		return GetGeneratedImageResponseMultiError(errors)
	}

	return nil
}

// GetGeneratedImageResponseMultiError is an error wrapping multiple validation
// errors returned by GetGeneratedImageResponse.ValidateAll() if the
// designated constraints aren't met.
type GetGeneratedImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGeneratedImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGeneratedImageResponseMultiError) AllErrors() []error { return m }

// GetGeneratedImageResponseValidationError is the validation error returned by
// GetGeneratedImageResponse.Validate if the designated constraints aren't met.
type GetGeneratedImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGeneratedImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGeneratedImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGeneratedImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGeneratedImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGeneratedImageResponseValidationError) ErrorName() string {
	return "GetGeneratedImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGeneratedImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGeneratedImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGeneratedImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGeneratedImageResponseValidationError{}

// Validate checks the field values on GetModelInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelInfoResponseMultiError, or nil if none found.
func (m *GetModelInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelName

	// no validation rules for ModelVersion

	if len(errors) > 0 {
		return GetModelInfoResponseMultiError(errors)
	}

	return nil
}

// GetModelInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetModelInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetModelInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelInfoResponseMultiError) AllErrors() []error { return m }

// GetModelInfoResponseValidationError is the validation error returned by
// GetModelInfoResponse.Validate if the designated constraints aren't met.
type GetModelInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelInfoResponseValidationError) ErrorName() string {
	return "GetModelInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelInfoResponseValidationError{}
