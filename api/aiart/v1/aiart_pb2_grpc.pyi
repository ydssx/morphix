"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.aiart.v1.aiart_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ArtServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GenerateImage: grpc.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.GenerateImageRequest,
        api.aiart.v1.aiart_pb2.GenerateImageResponse,
    ]
    """生成图像"""
    GetGenerateStatus: grpc.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.GetGenerateStatusRequest,
        api.aiart.v1.aiart_pb2.GenerateStatusResponse,
    ]
    """获取生成任务状态"""
    GetGeneratedImage: grpc.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.GetGeneratedImageRequest,
        api.aiart.v1.aiart_pb2.GetGeneratedImageResponse,
    ]
    """获取已生成的图像"""
    GetModelInfo: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        api.aiart.v1.aiart_pb2.GetModelInfoResponse,
    ]
    """获取模型信息"""
    ImageToImage: grpc.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.ImageToImageRequest,
        api.aiart.v1.aiart_pb2.ImageToImageResponse,
    ]

class ArtServiceAsyncStub:
    GenerateImage: grpc.aio.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.GenerateImageRequest,
        api.aiart.v1.aiart_pb2.GenerateImageResponse,
    ]
    """生成图像"""
    GetGenerateStatus: grpc.aio.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.GetGenerateStatusRequest,
        api.aiart.v1.aiart_pb2.GenerateStatusResponse,
    ]
    """获取生成任务状态"""
    GetGeneratedImage: grpc.aio.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.GetGeneratedImageRequest,
        api.aiart.v1.aiart_pb2.GetGeneratedImageResponse,
    ]
    """获取已生成的图像"""
    GetModelInfo: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        api.aiart.v1.aiart_pb2.GetModelInfoResponse,
    ]
    """获取模型信息"""
    ImageToImage: grpc.aio.UnaryUnaryMultiCallable[
        api.aiart.v1.aiart_pb2.ImageToImageRequest,
        api.aiart.v1.aiart_pb2.ImageToImageResponse,
    ]

class ArtServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GenerateImage(
        self,
        request: api.aiart.v1.aiart_pb2.GenerateImageRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.aiart.v1.aiart_pb2.GenerateImageResponse, collections.abc.Awaitable[api.aiart.v1.aiart_pb2.GenerateImageResponse]]:
        """生成图像"""
    @abc.abstractmethod
    def GetGenerateStatus(
        self,
        request: api.aiart.v1.aiart_pb2.GetGenerateStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.aiart.v1.aiart_pb2.GenerateStatusResponse, collections.abc.Awaitable[api.aiart.v1.aiart_pb2.GenerateStatusResponse]]:
        """获取生成任务状态"""
    @abc.abstractmethod
    def GetGeneratedImage(
        self,
        request: api.aiart.v1.aiart_pb2.GetGeneratedImageRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.aiart.v1.aiart_pb2.GetGeneratedImageResponse, collections.abc.Awaitable[api.aiart.v1.aiart_pb2.GetGeneratedImageResponse]]:
        """获取已生成的图像"""
    @abc.abstractmethod
    def GetModelInfo(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[api.aiart.v1.aiart_pb2.GetModelInfoResponse, collections.abc.Awaitable[api.aiart.v1.aiart_pb2.GetModelInfoResponse]]:
        """获取模型信息"""
    @abc.abstractmethod
    def ImageToImage(
        self,
        request: api.aiart.v1.aiart_pb2.ImageToImageRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.aiart.v1.aiart_pb2.ImageToImageResponse, collections.abc.Awaitable[api.aiart.v1.aiart_pb2.ImageToImageResponse]]: ...

def add_ArtServiceServicer_to_server(servicer: ArtServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
