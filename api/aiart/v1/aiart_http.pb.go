// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: api/aiart/v1/aiart.proto

package aiartv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationArtServiceGenerateImage = "/aiartv1.ArtService/GenerateImage"
const OperationArtServiceGetGenerateStatus = "/aiartv1.ArtService/GetGenerateStatus"
const OperationArtServiceGetGeneratedImage = "/aiartv1.ArtService/GetGeneratedImage"
const OperationArtServiceImageToImage = "/aiartv1.ArtService/ImageToImage"

type ArtServiceHTTPServer interface {
	// GenerateImage 生成图像
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	// GetGenerateStatus 获取生成任务状态
	GetGenerateStatus(context.Context, *GetGenerateStatusRequest) (*GenerateStatusResponse, error)
	// GetGeneratedImage 获取已生成的图像
	GetGeneratedImage(context.Context, *GetGeneratedImageRequest) (*GetGeneratedImageResponse, error)
	ImageToImage(context.Context, *ImageToImageRequest) (*ImageToImageResponse, error)
}

func RegisterArtServiceHTTPServer(s *http.Server, srv ArtServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/images/generate", _ArtService_GenerateImage0_HTTP_Handler(srv))
	r.GET("/v1/images/generate_status", _ArtService_GetGenerateStatus0_HTTP_Handler(srv))
	r.GET("/v1/images/{image_id}", _ArtService_GetGeneratedImage0_HTTP_Handler(srv))
	r.POST("/v1/images/image_to_image", _ArtService_ImageToImage0_HTTP_Handler(srv))
}

func _ArtService_GenerateImage0_HTTP_Handler(srv ArtServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArtServiceGenerateImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateImage(ctx, req.(*GenerateImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateImageResponse)
		return ctx.Result(200, reply)
	}
}

func _ArtService_GetGenerateStatus0_HTTP_Handler(srv ArtServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGenerateStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArtServiceGetGenerateStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGenerateStatus(ctx, req.(*GetGenerateStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _ArtService_GetGeneratedImage0_HTTP_Handler(srv ArtServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGeneratedImageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArtServiceGetGeneratedImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGeneratedImage(ctx, req.(*GetGeneratedImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGeneratedImageResponse)
		return ctx.Result(200, reply)
	}
}

func _ArtService_ImageToImage0_HTTP_Handler(srv ArtServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImageToImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationArtServiceImageToImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImageToImage(ctx, req.(*ImageToImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageToImageResponse)
		return ctx.Result(200, reply)
	}
}

type ArtServiceHTTPClient interface {
	GenerateImage(ctx context.Context, req *GenerateImageRequest, opts ...http.CallOption) (rsp *GenerateImageResponse, err error)
	GetGenerateStatus(ctx context.Context, req *GetGenerateStatusRequest, opts ...http.CallOption) (rsp *GenerateStatusResponse, err error)
	GetGeneratedImage(ctx context.Context, req *GetGeneratedImageRequest, opts ...http.CallOption) (rsp *GetGeneratedImageResponse, err error)
	ImageToImage(ctx context.Context, req *ImageToImageRequest, opts ...http.CallOption) (rsp *ImageToImageResponse, err error)
}

type ArtServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewArtServiceHTTPClient(client *http.Client) ArtServiceHTTPClient {
	return &ArtServiceHTTPClientImpl{client}
}

func (c *ArtServiceHTTPClientImpl) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...http.CallOption) (*GenerateImageResponse, error) {
	var out GenerateImageResponse
	pattern := "/v1/images/generate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArtServiceGenerateImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArtServiceHTTPClientImpl) GetGenerateStatus(ctx context.Context, in *GetGenerateStatusRequest, opts ...http.CallOption) (*GenerateStatusResponse, error) {
	var out GenerateStatusResponse
	pattern := "/v1/images/generate_status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArtServiceGetGenerateStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArtServiceHTTPClientImpl) GetGeneratedImage(ctx context.Context, in *GetGeneratedImageRequest, opts ...http.CallOption) (*GetGeneratedImageResponse, error) {
	var out GetGeneratedImageResponse
	pattern := "/v1/images/{image_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationArtServiceGetGeneratedImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ArtServiceHTTPClientImpl) ImageToImage(ctx context.Context, in *ImageToImageRequest, opts ...http.CallOption) (*ImageToImageResponse, error) {
	var out ImageToImageResponse
	pattern := "/v1/images/image_to_image"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationArtServiceImageToImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
