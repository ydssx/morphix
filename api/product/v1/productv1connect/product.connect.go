// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/product/v1/product.proto

package productv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ydssx/morphix/api/product/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "productv1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceCreateProductProcedure is the fully-qualified name of the ProductService's
	// CreateProduct RPC.
	ProductServiceCreateProductProcedure = "/productv1.ProductService/CreateProduct"
	// ProductServiceGetProductsProcedure is the fully-qualified name of the ProductService's
	// GetProducts RPC.
	ProductServiceGetProductsProcedure = "/productv1.ProductService/GetProducts"
	// ProductServiceGetProductProcedure is the fully-qualified name of the ProductService's GetProduct
	// RPC.
	ProductServiceGetProductProcedure = "/productv1.ProductService/GetProduct"
	// ProductServiceUpdateProductProcedure is the fully-qualified name of the ProductService's
	// UpdateProduct RPC.
	ProductServiceUpdateProductProcedure = "/productv1.ProductService/UpdateProduct"
	// ProductServiceDeleteProductProcedure is the fully-qualified name of the ProductService's
	// DeleteProduct RPC.
	ProductServiceDeleteProductProcedure = "/productv1.ProductService/DeleteProduct"
	// ProductServiceGetProductStockProcedure is the fully-qualified name of the ProductService's
	// GetProductStock RPC.
	ProductServiceGetProductStockProcedure = "/productv1.ProductService/GetProductStock"
	// ProductServiceUpdateProductStockProcedure is the fully-qualified name of the ProductService's
	// UpdateProductStock RPC.
	ProductServiceUpdateProductStockProcedure = "/productv1.ProductService/UpdateProductStock"
	// ProductServiceGetProductsStockProcedure is the fully-qualified name of the ProductService's
	// GetProductsStock RPC.
	ProductServiceGetProductsStockProcedure = "/productv1.ProductService/GetProductsStock"
)

// ProductServiceClient is a client for the productv1.ProductService service.
type ProductServiceClient interface {
	// 创建产品
	CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error)
	// 获取产品列表
	GetProducts(context.Context, *connect_go.Request[v1.GetProductsRequest]) (*connect_go.Response[v1.GetProductsResponse], error)
	// 获取单个产品
	GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.Product], error)
	// 更新产品信息
	UpdateProduct(context.Context, *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error)
	// 删除产品
	DeleteProduct(context.Context, *connect_go.Request[v1.DeleteProductRequest]) (*connect_go.Response[v1.DeleteProductResponse], error)
	GetProductStock(context.Context, *connect_go.Request[v1.GetProductStockRequest]) (*connect_go.Response[v1.GetProductStockResponse], error)
	UpdateProductStock(context.Context, *connect_go.Request[v1.UpdateProductStockRequest]) (*connect_go.Response[v1.UpdateProductStockResponse], error)
	// 获取产品库存
	GetProductsStock(context.Context, *connect_go.Request[v1.GetProductsStockRequest]) (*connect_go.Response[v1.GetProductsStockResponse], error)
}

// NewProductServiceClient constructs a client for the productv1.ProductService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productServiceClient{
		createProduct: connect_go.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+ProductServiceCreateProductProcedure,
			opts...,
		),
		getProducts: connect_go.NewClient[v1.GetProductsRequest, v1.GetProductsResponse](
			httpClient,
			baseURL+ProductServiceGetProductsProcedure,
			opts...,
		),
		getProduct: connect_go.NewClient[v1.GetProductRequest, v1.Product](
			httpClient,
			baseURL+ProductServiceGetProductProcedure,
			opts...,
		),
		updateProduct: connect_go.NewClient[v1.UpdateProductRequest, v1.UpdateProductResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductProcedure,
			opts...,
		),
		deleteProduct: connect_go.NewClient[v1.DeleteProductRequest, v1.DeleteProductResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductProcedure,
			opts...,
		),
		getProductStock: connect_go.NewClient[v1.GetProductStockRequest, v1.GetProductStockResponse](
			httpClient,
			baseURL+ProductServiceGetProductStockProcedure,
			opts...,
		),
		updateProductStock: connect_go.NewClient[v1.UpdateProductStockRequest, v1.UpdateProductStockResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductStockProcedure,
			opts...,
		),
		getProductsStock: connect_go.NewClient[v1.GetProductsStockRequest, v1.GetProductsStockResponse](
			httpClient,
			baseURL+ProductServiceGetProductsStockProcedure,
			opts...,
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	createProduct      *connect_go.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	getProducts        *connect_go.Client[v1.GetProductsRequest, v1.GetProductsResponse]
	getProduct         *connect_go.Client[v1.GetProductRequest, v1.Product]
	updateProduct      *connect_go.Client[v1.UpdateProductRequest, v1.UpdateProductResponse]
	deleteProduct      *connect_go.Client[v1.DeleteProductRequest, v1.DeleteProductResponse]
	getProductStock    *connect_go.Client[v1.GetProductStockRequest, v1.GetProductStockResponse]
	updateProductStock *connect_go.Client[v1.UpdateProductStockRequest, v1.UpdateProductStockResponse]
	getProductsStock   *connect_go.Client[v1.GetProductsStockRequest, v1.GetProductsStockResponse]
}

// CreateProduct calls productv1.ProductService.CreateProduct.
func (c *productServiceClient) CreateProduct(ctx context.Context, req *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// GetProducts calls productv1.ProductService.GetProducts.
func (c *productServiceClient) GetProducts(ctx context.Context, req *connect_go.Request[v1.GetProductsRequest]) (*connect_go.Response[v1.GetProductsResponse], error) {
	return c.getProducts.CallUnary(ctx, req)
}

// GetProduct calls productv1.ProductService.GetProduct.
func (c *productServiceClient) GetProduct(ctx context.Context, req *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.Product], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// UpdateProduct calls productv1.ProductService.UpdateProduct.
func (c *productServiceClient) UpdateProduct(ctx context.Context, req *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// DeleteProduct calls productv1.ProductService.DeleteProduct.
func (c *productServiceClient) DeleteProduct(ctx context.Context, req *connect_go.Request[v1.DeleteProductRequest]) (*connect_go.Response[v1.DeleteProductResponse], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// GetProductStock calls productv1.ProductService.GetProductStock.
func (c *productServiceClient) GetProductStock(ctx context.Context, req *connect_go.Request[v1.GetProductStockRequest]) (*connect_go.Response[v1.GetProductStockResponse], error) {
	return c.getProductStock.CallUnary(ctx, req)
}

// UpdateProductStock calls productv1.ProductService.UpdateProductStock.
func (c *productServiceClient) UpdateProductStock(ctx context.Context, req *connect_go.Request[v1.UpdateProductStockRequest]) (*connect_go.Response[v1.UpdateProductStockResponse], error) {
	return c.updateProductStock.CallUnary(ctx, req)
}

// GetProductsStock calls productv1.ProductService.GetProductsStock.
func (c *productServiceClient) GetProductsStock(ctx context.Context, req *connect_go.Request[v1.GetProductsStockRequest]) (*connect_go.Response[v1.GetProductsStockResponse], error) {
	return c.getProductsStock.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the productv1.ProductService service.
type ProductServiceHandler interface {
	// 创建产品
	CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error)
	// 获取产品列表
	GetProducts(context.Context, *connect_go.Request[v1.GetProductsRequest]) (*connect_go.Response[v1.GetProductsResponse], error)
	// 获取单个产品
	GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.Product], error)
	// 更新产品信息
	UpdateProduct(context.Context, *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error)
	// 删除产品
	DeleteProduct(context.Context, *connect_go.Request[v1.DeleteProductRequest]) (*connect_go.Response[v1.DeleteProductResponse], error)
	GetProductStock(context.Context, *connect_go.Request[v1.GetProductStockRequest]) (*connect_go.Response[v1.GetProductStockResponse], error)
	UpdateProductStock(context.Context, *connect_go.Request[v1.UpdateProductStockRequest]) (*connect_go.Response[v1.UpdateProductStockResponse], error)
	// 获取产品库存
	GetProductsStock(context.Context, *connect_go.Request[v1.GetProductsStockRequest]) (*connect_go.Response[v1.GetProductsStockResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	productServiceCreateProductHandler := connect_go.NewUnaryHandler(
		ProductServiceCreateProductProcedure,
		svc.CreateProduct,
		opts...,
	)
	productServiceGetProductsHandler := connect_go.NewUnaryHandler(
		ProductServiceGetProductsProcedure,
		svc.GetProducts,
		opts...,
	)
	productServiceGetProductHandler := connect_go.NewUnaryHandler(
		ProductServiceGetProductProcedure,
		svc.GetProduct,
		opts...,
	)
	productServiceUpdateProductHandler := connect_go.NewUnaryHandler(
		ProductServiceUpdateProductProcedure,
		svc.UpdateProduct,
		opts...,
	)
	productServiceDeleteProductHandler := connect_go.NewUnaryHandler(
		ProductServiceDeleteProductProcedure,
		svc.DeleteProduct,
		opts...,
	)
	productServiceGetProductStockHandler := connect_go.NewUnaryHandler(
		ProductServiceGetProductStockProcedure,
		svc.GetProductStock,
		opts...,
	)
	productServiceUpdateProductStockHandler := connect_go.NewUnaryHandler(
		ProductServiceUpdateProductStockProcedure,
		svc.UpdateProductStock,
		opts...,
	)
	productServiceGetProductsStockHandler := connect_go.NewUnaryHandler(
		ProductServiceGetProductsStockProcedure,
		svc.GetProductsStock,
		opts...,
	)
	return "/productv1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceCreateProductProcedure:
			productServiceCreateProductHandler.ServeHTTP(w, r)
		case ProductServiceGetProductsProcedure:
			productServiceGetProductsHandler.ServeHTTP(w, r)
		case ProductServiceGetProductProcedure:
			productServiceGetProductHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductProcedure:
			productServiceUpdateProductHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductProcedure:
			productServiceDeleteProductHandler.ServeHTTP(w, r)
		case ProductServiceGetProductStockProcedure:
			productServiceGetProductStockHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductStockProcedure:
			productServiceUpdateProductStockHandler.ServeHTTP(w, r)
		case ProductServiceGetProductsStockProcedure:
			productServiceGetProductsStockHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.CreateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProducts(context.Context, *connect_go.Request[v1.GetProductsRequest]) (*connect_go.Response[v1.GetProductsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.GetProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.Product], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.GetProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProduct(context.Context, *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.UpdateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProduct(context.Context, *connect_go.Request[v1.DeleteProductRequest]) (*connect_go.Response[v1.DeleteProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.DeleteProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductStock(context.Context, *connect_go.Request[v1.GetProductStockRequest]) (*connect_go.Response[v1.GetProductStockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.GetProductStock is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProductStock(context.Context, *connect_go.Request[v1.UpdateProductStockRequest]) (*connect_go.Response[v1.UpdateProductStockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.UpdateProductStock is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductsStock(context.Context, *connect_go.Request[v1.GetProductsStockRequest]) (*connect_go.Response[v1.GetProductsStockResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("productv1.ProductService.GetProductsStock is not implemented"))
}
