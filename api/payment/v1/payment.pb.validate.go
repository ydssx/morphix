// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/payment/v1/payment.proto

package paymentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MakePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MakePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakePaymentRequestMultiError, or nil if none found.
func (m *MakePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MakePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Amount

	// no validation rules for Currency

	if len(errors) > 0 {
		return MakePaymentRequestMultiError(errors)
	}

	return nil
}

// MakePaymentRequestMultiError is an error wrapping multiple validation errors
// returned by MakePaymentRequest.ValidateAll() if the designated constraints
// aren't met.
type MakePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakePaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakePaymentRequestMultiError) AllErrors() []error { return m }

// MakePaymentRequestValidationError is the validation error returned by
// MakePaymentRequest.Validate if the designated constraints aren't met.
type MakePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakePaymentRequestValidationError) ErrorName() string {
	return "MakePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MakePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakePaymentRequestValidationError{}

// Validate checks the field values on PaymentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentResponseMultiError, or nil if none found.
func (m *PaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Status

	// no validation rules for PaymentUrl

	if len(errors) > 0 {
		return PaymentResponseMultiError(errors)
	}

	return nil
}

// PaymentResponseMultiError is an error wrapping multiple validation errors
// returned by PaymentResponse.ValidateAll() if the designated constraints
// aren't met.
type PaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentResponseMultiError) AllErrors() []error { return m }

// PaymentResponseValidationError is the validation error returned by
// PaymentResponse.Validate if the designated constraints aren't met.
type PaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentResponseValidationError) ErrorName() string { return "PaymentResponseValidationError" }

// Error satisfies the builtin error interface
func (e PaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentResponseValidationError{}

// Validate checks the field values on GetPaymentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentRequestMultiError, or nil if none found.
func (m *GetPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return GetPaymentRequestMultiError(errors)
	}

	return nil
}

// GetPaymentRequestMultiError is an error wrapping multiple validation errors
// returned by GetPaymentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentRequestMultiError) AllErrors() []error { return m }

// GetPaymentRequestValidationError is the validation error returned by
// GetPaymentRequest.Validate if the designated constraints aren't met.
type GetPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentRequestValidationError) ErrorName() string {
	return "GetPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentRequestValidationError{}

// Validate checks the field values on GetPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentResponseMultiError, or nil if none found.
func (m *GetPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Status

	if len(errors) > 0 {
		return GetPaymentResponseMultiError(errors)
	}

	return nil
}

// GetPaymentResponseMultiError is an error wrapping multiple validation errors
// returned by GetPaymentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentResponseMultiError) AllErrors() []error { return m }

// GetPaymentResponseValidationError is the validation error returned by
// GetPaymentResponse.Validate if the designated constraints aren't met.
type GetPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentResponseValidationError) ErrorName() string {
	return "GetPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentResponseValidationError{}

// Validate checks the field values on CancelPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelPaymentRequestMultiError, or nil if none found.
func (m *CancelPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return CancelPaymentRequestMultiError(errors)
	}

	return nil
}

// CancelPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CancelPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPaymentRequestMultiError) AllErrors() []error { return m }

// CancelPaymentRequestValidationError is the validation error returned by
// CancelPaymentRequest.Validate if the designated constraints aren't met.
type CancelPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPaymentRequestValidationError) ErrorName() string {
	return "CancelPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPaymentRequestValidationError{}

// Validate checks the field values on CancelPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelPaymentResponseMultiError, or nil if none found.
func (m *CancelPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CancelPaymentResponseMultiError(errors)
	}

	return nil
}

// CancelPaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CancelPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelPaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelPaymentResponseMultiError) AllErrors() []error { return m }

// CancelPaymentResponseValidationError is the validation error returned by
// CancelPaymentResponse.Validate if the designated constraints aren't met.
type CancelPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelPaymentResponseValidationError) ErrorName() string {
	return "CancelPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelPaymentResponseValidationError{}

// Validate checks the field values on RefundRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefundRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefundRequestMultiError, or
// nil if none found.
func (m *RefundRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Amount

	// no validation rules for Currency

	if len(errors) > 0 {
		return RefundRequestMultiError(errors)
	}

	return nil
}

// RefundRequestMultiError is an error wrapping multiple validation errors
// returned by RefundRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundRequestMultiError) AllErrors() []error { return m }

// RefundRequestValidationError is the validation error returned by
// RefundRequest.Validate if the designated constraints aren't met.
type RefundRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundRequestValidationError) ErrorName() string { return "RefundRequestValidationError" }

// Error satisfies the builtin error interface
func (e RefundRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundRequestValidationError{}

// Validate checks the field values on RefundResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefundResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefundResponseMultiError,
// or nil if none found.
func (m *RefundResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Status

	if len(errors) > 0 {
		return RefundResponseMultiError(errors)
	}

	return nil
}

// RefundResponseMultiError is an error wrapping multiple validation errors
// returned by RefundResponse.ValidateAll() if the designated constraints
// aren't met.
type RefundResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundResponseMultiError) AllErrors() []error { return m }

// RefundResponseValidationError is the validation error returned by
// RefundResponse.Validate if the designated constraints aren't met.
type RefundResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundResponseValidationError) ErrorName() string { return "RefundResponseValidationError" }

// Error satisfies the builtin error interface
func (e RefundResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundResponseValidationError{}
