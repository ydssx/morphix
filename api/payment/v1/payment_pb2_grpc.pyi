"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.payment.v1.payment_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class PaymentServiceStub:
    """定义支付服务接口"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    MakePayment: grpc.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.MakePaymentRequest,
        api.payment.v1.payment_pb2.PaymentResponse,
    ]
    """发起支付"""
    GetPayment: grpc.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.GetPaymentRequest,
        api.payment.v1.payment_pb2.GetPaymentResponse,
    ]
    """查询支付状态"""
    CancelPayment: grpc.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.CancelPaymentRequest,
        api.payment.v1.payment_pb2.CancelPaymentResponse,
    ]
    """取消支付"""
    Refund: grpc.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.RefundRequest,
        api.payment.v1.payment_pb2.RefundResponse,
    ]
    """退款"""

class PaymentServiceAsyncStub:
    """定义支付服务接口"""

    MakePayment: grpc.aio.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.MakePaymentRequest,
        api.payment.v1.payment_pb2.PaymentResponse,
    ]
    """发起支付"""
    GetPayment: grpc.aio.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.GetPaymentRequest,
        api.payment.v1.payment_pb2.GetPaymentResponse,
    ]
    """查询支付状态"""
    CancelPayment: grpc.aio.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.CancelPaymentRequest,
        api.payment.v1.payment_pb2.CancelPaymentResponse,
    ]
    """取消支付"""
    Refund: grpc.aio.UnaryUnaryMultiCallable[
        api.payment.v1.payment_pb2.RefundRequest,
        api.payment.v1.payment_pb2.RefundResponse,
    ]
    """退款"""

class PaymentServiceServicer(metaclass=abc.ABCMeta):
    """定义支付服务接口"""

    @abc.abstractmethod
    def MakePayment(
        self,
        request: api.payment.v1.payment_pb2.MakePaymentRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.payment.v1.payment_pb2.PaymentResponse, collections.abc.Awaitable[api.payment.v1.payment_pb2.PaymentResponse]]:
        """发起支付"""
    @abc.abstractmethod
    def GetPayment(
        self,
        request: api.payment.v1.payment_pb2.GetPaymentRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.payment.v1.payment_pb2.GetPaymentResponse, collections.abc.Awaitable[api.payment.v1.payment_pb2.GetPaymentResponse]]:
        """查询支付状态"""
    @abc.abstractmethod
    def CancelPayment(
        self,
        request: api.payment.v1.payment_pb2.CancelPaymentRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.payment.v1.payment_pb2.CancelPaymentResponse, collections.abc.Awaitable[api.payment.v1.payment_pb2.CancelPaymentResponse]]:
        """取消支付"""
    @abc.abstractmethod
    def Refund(
        self,
        request: api.payment.v1.payment_pb2.RefundRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.payment.v1.payment_pb2.RefundResponse, collections.abc.Awaitable[api.payment.v1.payment_pb2.RefundResponse]]:
        """退款"""

def add_PaymentServiceServicer_to_server(servicer: PaymentServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
