// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: api/payment/v1/payment.proto

package paymentv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPaymentServiceCancelPayment = "/paymentv1.PaymentService/CancelPayment"
const OperationPaymentServiceGetPayment = "/paymentv1.PaymentService/GetPayment"
const OperationPaymentServiceMakePayment = "/paymentv1.PaymentService/MakePayment"
const OperationPaymentServiceRefund = "/paymentv1.PaymentService/Refund"

type PaymentServiceHTTPServer interface {
	// CancelPayment 取消支付
	CancelPayment(context.Context, *CancelPaymentRequest) (*CancelPaymentResponse, error)
	// GetPayment 查询支付状态
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	// MakePayment 发起支付
	MakePayment(context.Context, *MakePaymentRequest) (*PaymentResponse, error)
	// Refund 退款
	Refund(context.Context, *RefundRequest) (*RefundResponse, error)
}

func RegisterPaymentServiceHTTPServer(s *http.Server, srv PaymentServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/payments", _PaymentService_MakePayment0_HTTP_Handler(srv))
	r.GET("/api/v1/payments/{order_id}", _PaymentService_GetPayment0_HTTP_Handler(srv))
	r.DELETE("/api/v1/payments/{order_id}", _PaymentService_CancelPayment0_HTTP_Handler(srv))
	r.POST("/api/v1/payments/{order_id}/refund", _PaymentService_Refund0_HTTP_Handler(srv))
}

func _PaymentService_MakePayment0_HTTP_Handler(srv PaymentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MakePaymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentServiceMakePayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MakePayment(ctx, req.(*MakePaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PaymentResponse)
		return ctx.Result(200, reply)
	}
}

func _PaymentService_GetPayment0_HTTP_Handler(srv PaymentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPaymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentServiceGetPayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPayment(ctx, req.(*GetPaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPaymentResponse)
		return ctx.Result(200, reply)
	}
}

func _PaymentService_CancelPayment0_HTTP_Handler(srv PaymentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelPaymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentServiceCancelPayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelPayment(ctx, req.(*CancelPaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelPaymentResponse)
		return ctx.Result(200, reply)
	}
}

func _PaymentService_Refund0_HTTP_Handler(srv PaymentServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefundRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentServiceRefund)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Refund(ctx, req.(*RefundRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefundResponse)
		return ctx.Result(200, reply)
	}
}

type PaymentServiceHTTPClient interface {
	CancelPayment(ctx context.Context, req *CancelPaymentRequest, opts ...http.CallOption) (rsp *CancelPaymentResponse, err error)
	GetPayment(ctx context.Context, req *GetPaymentRequest, opts ...http.CallOption) (rsp *GetPaymentResponse, err error)
	MakePayment(ctx context.Context, req *MakePaymentRequest, opts ...http.CallOption) (rsp *PaymentResponse, err error)
	Refund(ctx context.Context, req *RefundRequest, opts ...http.CallOption) (rsp *RefundResponse, err error)
}

type PaymentServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPaymentServiceHTTPClient(client *http.Client) PaymentServiceHTTPClient {
	return &PaymentServiceHTTPClientImpl{client}
}

func (c *PaymentServiceHTTPClientImpl) CancelPayment(ctx context.Context, in *CancelPaymentRequest, opts ...http.CallOption) (*CancelPaymentResponse, error) {
	var out CancelPaymentResponse
	pattern := "/api/v1/payments/{order_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPaymentServiceCancelPayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PaymentServiceHTTPClientImpl) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...http.CallOption) (*GetPaymentResponse, error) {
	var out GetPaymentResponse
	pattern := "/api/v1/payments/{order_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPaymentServiceGetPayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PaymentServiceHTTPClientImpl) MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...http.CallOption) (*PaymentResponse, error) {
	var out PaymentResponse
	pattern := "/api/v1/payments"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentServiceMakePayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PaymentServiceHTTPClientImpl) Refund(ctx context.Context, in *RefundRequest, opts ...http.CallOption) (*RefundResponse, error) {
	var out RefundResponse
	pattern := "/api/v1/payments/{order_id}/refund"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentServiceRefund))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
