// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: api/sms/v1/sms.proto

package smsv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSMSServiceSendSMS = "/smsv1.SMSService/SendSMS"

type SMSServiceHTTPServer interface {
	// SendSMS 发送短信
	SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error)
}

func RegisterSMSServiceHTTPServer(s *http.Server, srv SMSServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/sms/send", _SMSService_SendSMS0_HTTP_Handler(srv))
}

func _SMSService_SendSMS0_HTTP_Handler(srv SMSServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendSMSRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSMSServiceSendSMS)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSMS(ctx, req.(*SendSMSRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendSMSResponse)
		return ctx.Result(200, reply)
	}
}

type SMSServiceHTTPClient interface {
	SendSMS(ctx context.Context, req *SendSMSRequest, opts ...http.CallOption) (rsp *SendSMSResponse, err error)
}

type SMSServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSMSServiceHTTPClient(client *http.Client) SMSServiceHTTPClient {
	return &SMSServiceHTTPClientImpl{client}
}

func (c *SMSServiceHTTPClientImpl) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...http.CallOption) (*SendSMSResponse, error) {
	var out SendSMSResponse
	pattern := "/api/v1/sms/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSMSServiceSendSMS))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
