"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.sms.v1.sms_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class SMSServiceStub:
    """短信服务接口"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    SendSMS: grpc.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.SendSMSRequest,
        api.sms.v1.sms_pb2.SendSMSResponse,
    ]
    """发送短信"""
    CheckSMSStatus: grpc.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.QuerySMSStatusRequest,
        api.sms.v1.sms_pb2.QuerySMSStatusResponse,
    ]
    """查询短信状态"""
    ManageSMSTemplate: grpc.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.TemplateManagementRequest,
        api.sms.v1.sms_pb2.TemplateManagementResponse,
    ]
    """管理短信模板"""
    ManageSMSSignature: grpc.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.SignatureManagementRequest,
        api.sms.v1.sms_pb2.SignatureManagementResponse,
    ]
    """管理短信签名"""

class SMSServiceAsyncStub:
    """短信服务接口"""

    SendSMS: grpc.aio.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.SendSMSRequest,
        api.sms.v1.sms_pb2.SendSMSResponse,
    ]
    """发送短信"""
    CheckSMSStatus: grpc.aio.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.QuerySMSStatusRequest,
        api.sms.v1.sms_pb2.QuerySMSStatusResponse,
    ]
    """查询短信状态"""
    ManageSMSTemplate: grpc.aio.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.TemplateManagementRequest,
        api.sms.v1.sms_pb2.TemplateManagementResponse,
    ]
    """管理短信模板"""
    ManageSMSSignature: grpc.aio.UnaryUnaryMultiCallable[
        api.sms.v1.sms_pb2.SignatureManagementRequest,
        api.sms.v1.sms_pb2.SignatureManagementResponse,
    ]
    """管理短信签名"""

class SMSServiceServicer(metaclass=abc.ABCMeta):
    """短信服务接口"""

    @abc.abstractmethod
    def SendSMS(
        self,
        request: api.sms.v1.sms_pb2.SendSMSRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.sms.v1.sms_pb2.SendSMSResponse, collections.abc.Awaitable[api.sms.v1.sms_pb2.SendSMSResponse]]:
        """发送短信"""
    @abc.abstractmethod
    def CheckSMSStatus(
        self,
        request: api.sms.v1.sms_pb2.QuerySMSStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.sms.v1.sms_pb2.QuerySMSStatusResponse, collections.abc.Awaitable[api.sms.v1.sms_pb2.QuerySMSStatusResponse]]:
        """查询短信状态"""
    @abc.abstractmethod
    def ManageSMSTemplate(
        self,
        request: api.sms.v1.sms_pb2.TemplateManagementRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.sms.v1.sms_pb2.TemplateManagementResponse, collections.abc.Awaitable[api.sms.v1.sms_pb2.TemplateManagementResponse]]:
        """管理短信模板"""
    @abc.abstractmethod
    def ManageSMSSignature(
        self,
        request: api.sms.v1.sms_pb2.SignatureManagementRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.sms.v1.sms_pb2.SignatureManagementResponse, collections.abc.Awaitable[api.sms.v1.sms_pb2.SignatureManagementResponse]]:
        """管理短信签名"""

def add_SMSServiceServicer_to_server(servicer: SMSServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
