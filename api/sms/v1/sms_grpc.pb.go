// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/sms/v1/sms.proto

package smsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SMSService_SendSMS_FullMethodName            = "/smsv1.SMSService/SendSMS"
	SMSService_CheckSMSStatus_FullMethodName     = "/smsv1.SMSService/CheckSMSStatus"
	SMSService_ManageSMSTemplate_FullMethodName  = "/smsv1.SMSService/ManageSMSTemplate"
	SMSService_ManageSMSSignature_FullMethodName = "/smsv1.SMSService/ManageSMSSignature"
)

// SMSServiceClient is the client API for SMSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SMSServiceClient interface {
	// 发送短信
	SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error)
	// 查询短信状态
	CheckSMSStatus(ctx context.Context, in *QuerySMSStatusRequest, opts ...grpc.CallOption) (*QuerySMSStatusResponse, error)
	// 管理短信模板
	ManageSMSTemplate(ctx context.Context, in *TemplateManagementRequest, opts ...grpc.CallOption) (*TemplateManagementResponse, error)
	// 管理短信签名
	ManageSMSSignature(ctx context.Context, in *SignatureManagementRequest, opts ...grpc.CallOption) (*SignatureManagementResponse, error)
}

type sMSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSMSServiceClient(cc grpc.ClientConnInterface) SMSServiceClient {
	return &sMSServiceClient{cc}
}

func (c *sMSServiceClient) SendSMS(ctx context.Context, in *SendSMSRequest, opts ...grpc.CallOption) (*SendSMSResponse, error) {
	out := new(SendSMSResponse)
	err := c.cc.Invoke(ctx, SMSService_SendSMS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) CheckSMSStatus(ctx context.Context, in *QuerySMSStatusRequest, opts ...grpc.CallOption) (*QuerySMSStatusResponse, error) {
	out := new(QuerySMSStatusResponse)
	err := c.cc.Invoke(ctx, SMSService_CheckSMSStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) ManageSMSTemplate(ctx context.Context, in *TemplateManagementRequest, opts ...grpc.CallOption) (*TemplateManagementResponse, error) {
	out := new(TemplateManagementResponse)
	err := c.cc.Invoke(ctx, SMSService_ManageSMSTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSServiceClient) ManageSMSSignature(ctx context.Context, in *SignatureManagementRequest, opts ...grpc.CallOption) (*SignatureManagementResponse, error) {
	out := new(SignatureManagementResponse)
	err := c.cc.Invoke(ctx, SMSService_ManageSMSSignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SMSServiceServer is the server API for SMSService service.
// All implementations should embed UnimplementedSMSServiceServer
// for forward compatibility
type SMSServiceServer interface {
	// 发送短信
	SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error)
	// 查询短信状态
	CheckSMSStatus(context.Context, *QuerySMSStatusRequest) (*QuerySMSStatusResponse, error)
	// 管理短信模板
	ManageSMSTemplate(context.Context, *TemplateManagementRequest) (*TemplateManagementResponse, error)
	// 管理短信签名
	ManageSMSSignature(context.Context, *SignatureManagementRequest) (*SignatureManagementResponse, error)
}

// UnimplementedSMSServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSMSServiceServer struct {
}

func (UnimplementedSMSServiceServer) SendSMS(context.Context, *SendSMSRequest) (*SendSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (UnimplementedSMSServiceServer) CheckSMSStatus(context.Context, *QuerySMSStatusRequest) (*QuerySMSStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSMSStatus not implemented")
}
func (UnimplementedSMSServiceServer) ManageSMSTemplate(context.Context, *TemplateManagementRequest) (*TemplateManagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageSMSTemplate not implemented")
}
func (UnimplementedSMSServiceServer) ManageSMSSignature(context.Context, *SignatureManagementRequest) (*SignatureManagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageSMSSignature not implemented")
}

// UnsafeSMSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SMSServiceServer will
// result in compilation errors.
type UnsafeSMSServiceServer interface {
	mustEmbedUnimplementedSMSServiceServer()
}

func RegisterSMSServiceServer(s grpc.ServiceRegistrar, srv SMSServiceServer) {
	s.RegisterService(&SMSService_ServiceDesc, srv)
}

func _SMSService_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_SendSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).SendSMS(ctx, req.(*SendSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_CheckSMSStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySMSStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).CheckSMSStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_CheckSMSStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).CheckSMSStatus(ctx, req.(*QuerySMSStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_ManageSMSTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).ManageSMSTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_ManageSMSTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).ManageSMSTemplate(ctx, req.(*TemplateManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SMSService_ManageSMSSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SMSServiceServer).ManageSMSSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SMSService_ManageSMSSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SMSServiceServer).ManageSMSSignature(ctx, req.(*SignatureManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SMSService_ServiceDesc is the grpc.ServiceDesc for SMSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SMSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smsv1.SMSService",
	HandlerType: (*SMSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSMS",
			Handler:    _SMSService_SendSMS_Handler,
		},
		{
			MethodName: "CheckSMSStatus",
			Handler:    _SMSService_CheckSMSStatus_Handler,
		},
		{
			MethodName: "ManageSMSTemplate",
			Handler:    _SMSService_ManageSMSTemplate_Handler,
		},
		{
			MethodName: "ManageSMSSignature",
			Handler:    _SMSService_ManageSMSSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sms/v1/sms.proto",
}
