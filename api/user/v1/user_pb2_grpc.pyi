"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.user.v1.user_pb2
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class UserServiceStub:
    """用户服务"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Register: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.RegistrationRequest,
        api.user.v1.user_pb2.User,
    ]
    """用户注册"""
    Login: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.LoginRequest,
        api.user.v1.user_pb2.AuthenticationResponse,
    ]
    """用户登录"""
    Logout: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.LogoutRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    UpdateProfile: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.UpdateProfileRequest,
        api.user.v1.user_pb2.User,
    ]
    ResetPassword: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.ResetPasswordRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """用户重置密码"""
    Authenticate: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        api.user.v1.user_pb2.AuthenticationResponse,
    ]
    Authorize: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.AuthorizationRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    GetUserList: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.UserListRequest,
        api.user.v1.user_pb2.UserListResponse,
    ]
    ManageUserPermission: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.ManageUserPermissionRequest,
        api.user.v1.user_pb2.User,
    ]
    LogActivity: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.LogEntry,
        google.protobuf.empty_pb2.Empty,
    ]
    GetUserActivity: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.GetUserActivityRequest,
        api.user.v1.user_pb2.UserActivityListResponse,
    ]
    GetUser: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.GetUserRequest,
        api.user.v1.user_pb2.User,
    ]
    GetUserPermission: grpc.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.GetUserPermissionRequest,
        api.user.v1.user_pb2.UserPermissionListResponse,
    ]
    """获取用户权限"""

class UserServiceAsyncStub:
    """用户服务"""

    Register: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.RegistrationRequest,
        api.user.v1.user_pb2.User,
    ]
    """用户注册"""
    Login: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.LoginRequest,
        api.user.v1.user_pb2.AuthenticationResponse,
    ]
    """用户登录"""
    Logout: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.LogoutRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    UpdateProfile: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.UpdateProfileRequest,
        api.user.v1.user_pb2.User,
    ]
    ResetPassword: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.ResetPasswordRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """用户重置密码"""
    Authenticate: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        api.user.v1.user_pb2.AuthenticationResponse,
    ]
    Authorize: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.AuthorizationRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    GetUserList: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.UserListRequest,
        api.user.v1.user_pb2.UserListResponse,
    ]
    ManageUserPermission: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.ManageUserPermissionRequest,
        api.user.v1.user_pb2.User,
    ]
    LogActivity: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.LogEntry,
        google.protobuf.empty_pb2.Empty,
    ]
    GetUserActivity: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.GetUserActivityRequest,
        api.user.v1.user_pb2.UserActivityListResponse,
    ]
    GetUser: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.GetUserRequest,
        api.user.v1.user_pb2.User,
    ]
    GetUserPermission: grpc.aio.UnaryUnaryMultiCallable[
        api.user.v1.user_pb2.GetUserPermissionRequest,
        api.user.v1.user_pb2.UserPermissionListResponse,
    ]
    """获取用户权限"""

class UserServiceServicer(metaclass=abc.ABCMeta):
    """用户服务"""

    @abc.abstractmethod
    def Register(
        self,
        request: api.user.v1.user_pb2.RegistrationRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.User, collections.abc.Awaitable[api.user.v1.user_pb2.User]]:
        """用户注册"""
    @abc.abstractmethod
    def Login(
        self,
        request: api.user.v1.user_pb2.LoginRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.AuthenticationResponse, collections.abc.Awaitable[api.user.v1.user_pb2.AuthenticationResponse]]:
        """用户登录"""
    @abc.abstractmethod
    def Logout(
        self,
        request: api.user.v1.user_pb2.LogoutRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def UpdateProfile(
        self,
        request: api.user.v1.user_pb2.UpdateProfileRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.User, collections.abc.Awaitable[api.user.v1.user_pb2.User]]: ...
    @abc.abstractmethod
    def ResetPassword(
        self,
        request: api.user.v1.user_pb2.ResetPasswordRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """用户重置密码"""
    @abc.abstractmethod
    def Authenticate(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.AuthenticationResponse, collections.abc.Awaitable[api.user.v1.user_pb2.AuthenticationResponse]]: ...
    @abc.abstractmethod
    def Authorize(
        self,
        request: api.user.v1.user_pb2.AuthorizationRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetUserList(
        self,
        request: api.user.v1.user_pb2.UserListRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.UserListResponse, collections.abc.Awaitable[api.user.v1.user_pb2.UserListResponse]]: ...
    @abc.abstractmethod
    def ManageUserPermission(
        self,
        request: api.user.v1.user_pb2.ManageUserPermissionRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.User, collections.abc.Awaitable[api.user.v1.user_pb2.User]]: ...
    @abc.abstractmethod
    def LogActivity(
        self,
        request: api.user.v1.user_pb2.LogEntry,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...
    @abc.abstractmethod
    def GetUserActivity(
        self,
        request: api.user.v1.user_pb2.GetUserActivityRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.UserActivityListResponse, collections.abc.Awaitable[api.user.v1.user_pb2.UserActivityListResponse]]: ...
    @abc.abstractmethod
    def GetUser(
        self,
        request: api.user.v1.user_pb2.GetUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.User, collections.abc.Awaitable[api.user.v1.user_pb2.User]]: ...
    @abc.abstractmethod
    def GetUserPermission(
        self,
        request: api.user.v1.user_pb2.GetUserPermissionRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.user.v1.user_pb2.UserPermissionListResponse, collections.abc.Awaitable[api.user.v1.user_pb2.UserPermissionListResponse]]:
        """获取用户权限"""

def add_UserServiceServicer_to_server(servicer: UserServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
