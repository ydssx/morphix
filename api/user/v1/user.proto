syntax = "proto3";

package userv1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "github.com/ydssx/morphix/api/user/v1;userv1";

// 用户服务
service UserService {
  // 用户注册
  rpc Register(RegistrationRequest) returns (User) {
    option (google.api.http) = {
      post: "/api/users/register"
      body: "*"
    };
  }
  // 用户登录
  rpc Login(LoginRequest) returns (AuthenticationResponse) {
    option (google.api.http) = {
      post: "/api/users/login"
      body: "*"
    };
  }

  rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/users/logout"
      body: "*"
    };
  }

  rpc UpdateProfile(UpdateProfileRequest) returns (User) {
    option (google.api.http) = {
      patch: "/api/users/profile/update"
      body: "*"
    };
  }
  // 用户重置密码
  rpc ResetPassword(ResetPasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/users/resetPassword"
      body: "*"
    };
  }

  rpc Authenticate(google.protobuf.Empty) returns (AuthenticationResponse) {
    option (google.api.http) = {
      post: "/api/users/authenticate"
      body: "*"
    };
  }

  rpc Authorize(AuthorizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/users/authorize"
      body: "*"
    };
  }

  rpc GetUserList(UserListRequest) returns (UserListResponse) {
    option (google.api.http) = {get: "/api/users"};
  }

  rpc ManageUserPermission(ManageUserPermissionRequest) returns (User) {
    option (google.api.http) = {
      post: "/api/users/managePermission"
      body: "*"
    };
  }

  rpc LogActivity(LogEntry) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/users/logActivity"
      body: "*"
    };
  }
  rpc GetUserActivity(GetUserActivityRequest) returns (UserActivityListResponse) {
    option (google.api.http) = {get: "/api/users/activity"};
  }

  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {get: "/api/user/{user_id}"};
  }
  // 获取用户权限
  rpc GetUserPermission(GetUserPermissionRequest) returns (UserPermissionListResponse) {
    option (google.api.http) = {get: "/api/user/{user_id}/permissions"};
  }
}

message User {
  int64 id = 1;
  string username = 2;
  string password = 3;
  string email = 4;
  string phone = 5;
  string avatar = 6;
  string nickname = 7;
}

message RegistrationRequest {
  // 用户名
  string username = 1;
  // 密码
  string password = 2 [
    (validate.rules).string.min_len = 6,
    (validate.rules).string.max_len = 20
  ];
  // 邮箱
  string email = 3 [(validate.rules).string.email = true];
  // 手机号
  string phone = 4;
  // 短信验证码
  string sms_code = 5;
  // 注册类型
  enum RegisterType {
    SMS = 0; // 通过短信验证码注册
    PASSWORD = 1; // 通过用户名密码注册
  }
  RegisterType register_type = 6;
}

message LoginRequest {
  string username = 1; // 用户名
  string password = 2; // 密码
  string phone_number = 3; // 手机号
}

message LogoutRequest {
  int64 user_id = 1;
}

message UpdateProfileRequest {
  string email = 1 [(validate.rules).string.email = true];
  string phone = 2 [
    (validate.rules).string.len = 11,
    (validate.rules).string.pattern = "^1[3-9]\\d{9}$"
  ];
  string username = 3 [
    (validate.rules).string.min_len = 3,
    (validate.rules).string.max_len = 20
  ];
}

message ResetPasswordRequest {
  string username = 1;
  string verification_code = 2 [(validate.rules).string.len = 6];
  string new_password = 3;
}

message AuthenticationResponse {
  string user_id = 1;
  string token = 2;
}

message AuthorizationRequest {
  string user_id = 1;
  string resource = 2;
  repeated string actions = 3;
}

message UserListResponse {
  repeated User users = 1;
}

message UserListRequest {
  int64 page = 1;
  int64 limit = 2;
}

message ManageUserPermissionRequest {
  int64 user_id = 1;
  repeated int64 role_ids = 2;
  repeated int64 permission_ids = 3;
  enum Mode {
    USER_PERMISSION_ADD = 0;
    USER_PERMISSION_DELETE = 1;
    USER_PERMISSION_UPDATE = 2;
    USER_PERMISSION_REPLACE = 3;
    ROLE_PERMISSION_ADD = 4;
    ROLE_PERMISSION_DELETE = 5;
    ROLE_PERMISSION_UPDATE = 6;
    ROLE_PERMISSION_REPLACE = 7;
  }
  Mode mode = 4;
}

message LogEntry {
  int64 user_id = 1;
  string action = 2; // 操作 例如: login, logout
  string timestamp = 3; // 时间戳
  string resource = 4; // 资源 例如: /api/users
  string message = 5; // 消息 例如: 登录成功
}

message GetUserRequest {
  int64 user_id = 1;
}

message GetUserPermissionRequest {
  int64 user_id = 1;
}

message UserPermissionListResponse {
  repeated UserPermission permission = 1;
}

message UserPermission {
  string resource = 1; // 资源 例如: /api/users
  repeated string actions = 2; // 权限 例如: GET, POST, PUT, DELETE
  repeated string roles = 3; // 角色 例如: admin, user
}

message UserActivityListResponse {
  repeated UserActivity activity = 1;
}

message GetUserActivityRequest {
  int64 user_id = 1;
  int64 page = 2;
  int64 limit = 3;
}

message UserActivity {
  string timestamp = 1;
  string action = 2;
  string resource = 3;
  string message = 4;
  int64 id = 5;
}
