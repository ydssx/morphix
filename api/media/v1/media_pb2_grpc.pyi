"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.media.v1.media_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class MediaServiceStub:
    """定义媒体服务接口"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    UploadVideo: grpc.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoUploadRequest,
        api.media.v1.media_pb2.VideoUploadResponse,
    ]
    """视频上传"""
    TranscodeVideo: grpc.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoTranscodeRequest,
        api.media.v1.media_pb2.VideoTranscodeResponse,
    ]
    """视频转码"""
    PlayVideo: grpc.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoPlaybackRequest,
        api.media.v1.media_pb2.VideoPlaybackResponse,
    ]
    """视频播放"""
    TakeScreenshot: grpc.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoScreenshotRequest,
        api.media.v1.media_pb2.VideoScreenshotResponse,
    ]
    """视频截图"""

class MediaServiceAsyncStub:
    """定义媒体服务接口"""

    UploadVideo: grpc.aio.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoUploadRequest,
        api.media.v1.media_pb2.VideoUploadResponse,
    ]
    """视频上传"""
    TranscodeVideo: grpc.aio.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoTranscodeRequest,
        api.media.v1.media_pb2.VideoTranscodeResponse,
    ]
    """视频转码"""
    PlayVideo: grpc.aio.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoPlaybackRequest,
        api.media.v1.media_pb2.VideoPlaybackResponse,
    ]
    """视频播放"""
    TakeScreenshot: grpc.aio.UnaryUnaryMultiCallable[
        api.media.v1.media_pb2.VideoScreenshotRequest,
        api.media.v1.media_pb2.VideoScreenshotResponse,
    ]
    """视频截图"""

class MediaServiceServicer(metaclass=abc.ABCMeta):
    """定义媒体服务接口"""

    @abc.abstractmethod
    def UploadVideo(
        self,
        request: api.media.v1.media_pb2.VideoUploadRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.media.v1.media_pb2.VideoUploadResponse, collections.abc.Awaitable[api.media.v1.media_pb2.VideoUploadResponse]]:
        """视频上传"""
    @abc.abstractmethod
    def TranscodeVideo(
        self,
        request: api.media.v1.media_pb2.VideoTranscodeRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.media.v1.media_pb2.VideoTranscodeResponse, collections.abc.Awaitable[api.media.v1.media_pb2.VideoTranscodeResponse]]:
        """视频转码"""
    @abc.abstractmethod
    def PlayVideo(
        self,
        request: api.media.v1.media_pb2.VideoPlaybackRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.media.v1.media_pb2.VideoPlaybackResponse, collections.abc.Awaitable[api.media.v1.media_pb2.VideoPlaybackResponse]]:
        """视频播放"""
    @abc.abstractmethod
    def TakeScreenshot(
        self,
        request: api.media.v1.media_pb2.VideoScreenshotRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.media.v1.media_pb2.VideoScreenshotResponse, collections.abc.Awaitable[api.media.v1.media_pb2.VideoScreenshotResponse]]:
        """视频截图"""

def add_MediaServiceServicer_to_server(servicer: MediaServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
