// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/media/v1/media.proto

package mediav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediaService_UploadVideo_FullMethodName    = "/mediav1.MediaService/UploadVideo"
	MediaService_TranscodeVideo_FullMethodName = "/mediav1.MediaService/TranscodeVideo"
	MediaService_PlayVideo_FullMethodName      = "/mediav1.MediaService/PlayVideo"
	MediaService_TakeScreenshot_FullMethodName = "/mediav1.MediaService/TakeScreenshot"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaServiceClient interface {
	// 视频上传
	UploadVideo(ctx context.Context, in *VideoUploadRequest, opts ...grpc.CallOption) (*VideoUploadResponse, error)
	// 视频转码
	TranscodeVideo(ctx context.Context, in *VideoTranscodeRequest, opts ...grpc.CallOption) (*VideoTranscodeResponse, error)
	// 视频播放
	PlayVideo(ctx context.Context, in *VideoPlaybackRequest, opts ...grpc.CallOption) (*VideoPlaybackResponse, error)
	// 视频截图
	TakeScreenshot(ctx context.Context, in *VideoScreenshotRequest, opts ...grpc.CallOption) (*VideoScreenshotResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) UploadVideo(ctx context.Context, in *VideoUploadRequest, opts ...grpc.CallOption) (*VideoUploadResponse, error) {
	out := new(VideoUploadResponse)
	err := c.cc.Invoke(ctx, MediaService_UploadVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) TranscodeVideo(ctx context.Context, in *VideoTranscodeRequest, opts ...grpc.CallOption) (*VideoTranscodeResponse, error) {
	out := new(VideoTranscodeResponse)
	err := c.cc.Invoke(ctx, MediaService_TranscodeVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) PlayVideo(ctx context.Context, in *VideoPlaybackRequest, opts ...grpc.CallOption) (*VideoPlaybackResponse, error) {
	out := new(VideoPlaybackResponse)
	err := c.cc.Invoke(ctx, MediaService_PlayVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) TakeScreenshot(ctx context.Context, in *VideoScreenshotRequest, opts ...grpc.CallOption) (*VideoScreenshotResponse, error) {
	out := new(VideoScreenshotResponse)
	err := c.cc.Invoke(ctx, MediaService_TakeScreenshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations should embed UnimplementedMediaServiceServer
// for forward compatibility
type MediaServiceServer interface {
	// 视频上传
	UploadVideo(context.Context, *VideoUploadRequest) (*VideoUploadResponse, error)
	// 视频转码
	TranscodeVideo(context.Context, *VideoTranscodeRequest) (*VideoTranscodeResponse, error)
	// 视频播放
	PlayVideo(context.Context, *VideoPlaybackRequest) (*VideoPlaybackResponse, error)
	// 视频截图
	TakeScreenshot(context.Context, *VideoScreenshotRequest) (*VideoScreenshotResponse, error)
}

// UnimplementedMediaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMediaServiceServer struct {
}

func (UnimplementedMediaServiceServer) UploadVideo(context.Context, *VideoUploadRequest) (*VideoUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedMediaServiceServer) TranscodeVideo(context.Context, *VideoTranscodeRequest) (*VideoTranscodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscodeVideo not implemented")
}
func (UnimplementedMediaServiceServer) PlayVideo(context.Context, *VideoPlaybackRequest) (*VideoPlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayVideo not implemented")
}
func (UnimplementedMediaServiceServer) TakeScreenshot(context.Context, *VideoScreenshotRequest) (*VideoScreenshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeScreenshot not implemented")
}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_UploadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UploadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UploadVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UploadVideo(ctx, req.(*VideoUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_TranscodeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoTranscodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).TranscodeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_TranscodeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).TranscodeVideo(ctx, req.(*VideoTranscodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_PlayVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoPlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).PlayVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_PlayVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).PlayVideo(ctx, req.(*VideoPlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_TakeScreenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoScreenshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).TakeScreenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_TakeScreenshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).TakeScreenshot(ctx, req.(*VideoScreenshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediav1.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadVideo",
			Handler:    _MediaService_UploadVideo_Handler,
		},
		{
			MethodName: "TranscodeVideo",
			Handler:    _MediaService_TranscodeVideo_Handler,
		},
		{
			MethodName: "PlayVideo",
			Handler:    _MediaService_PlayVideo_Handler,
		},
		{
			MethodName: "TakeScreenshot",
			Handler:    _MediaService_TakeScreenshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/media/v1/media.proto",
}
