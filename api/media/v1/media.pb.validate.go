// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/media/v1/media.proto

package mediav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VideoUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoUploadRequestMultiError, or nil if none found.
func (m *VideoUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoData

	// no validation rules for Filename

	if len(errors) > 0 {
		return VideoUploadRequestMultiError(errors)
	}

	return nil
}

// VideoUploadRequestMultiError is an error wrapping multiple validation errors
// returned by VideoUploadRequest.ValidateAll() if the designated constraints
// aren't met.
type VideoUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoUploadRequestMultiError) AllErrors() []error { return m }

// VideoUploadRequestValidationError is the validation error returned by
// VideoUploadRequest.Validate if the designated constraints aren't met.
type VideoUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoUploadRequestValidationError) ErrorName() string {
	return "VideoUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VideoUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoUploadRequestValidationError{}

// Validate checks the field values on VideoUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoUploadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoUploadResponseMultiError, or nil if none found.
func (m *VideoUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return VideoUploadResponseMultiError(errors)
	}

	return nil
}

// VideoUploadResponseMultiError is an error wrapping multiple validation
// errors returned by VideoUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type VideoUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoUploadResponseMultiError) AllErrors() []error { return m }

// VideoUploadResponseValidationError is the validation error returned by
// VideoUploadResponse.Validate if the designated constraints aren't met.
type VideoUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoUploadResponseValidationError) ErrorName() string {
	return "VideoUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VideoUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoUploadResponseValidationError{}

// Validate checks the field values on VideoTranscodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoTranscodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoTranscodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoTranscodeRequestMultiError, or nil if none found.
func (m *VideoTranscodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoTranscodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return VideoTranscodeRequestMultiError(errors)
	}

	return nil
}

// VideoTranscodeRequestMultiError is an error wrapping multiple validation
// errors returned by VideoTranscodeRequest.ValidateAll() if the designated
// constraints aren't met.
type VideoTranscodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoTranscodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoTranscodeRequestMultiError) AllErrors() []error { return m }

// VideoTranscodeRequestValidationError is the validation error returned by
// VideoTranscodeRequest.Validate if the designated constraints aren't met.
type VideoTranscodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoTranscodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoTranscodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoTranscodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoTranscodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoTranscodeRequestValidationError) ErrorName() string {
	return "VideoTranscodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VideoTranscodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoTranscodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoTranscodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoTranscodeRequestValidationError{}

// Validate checks the field values on VideoTranscodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoTranscodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoTranscodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoTranscodeResponseMultiError, or nil if none found.
func (m *VideoTranscodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoTranscodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VideoTranscodeResponseMultiError(errors)
	}

	return nil
}

// VideoTranscodeResponseMultiError is an error wrapping multiple validation
// errors returned by VideoTranscodeResponse.ValidateAll() if the designated
// constraints aren't met.
type VideoTranscodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoTranscodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoTranscodeResponseMultiError) AllErrors() []error { return m }

// VideoTranscodeResponseValidationError is the validation error returned by
// VideoTranscodeResponse.Validate if the designated constraints aren't met.
type VideoTranscodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoTranscodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoTranscodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoTranscodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoTranscodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoTranscodeResponseValidationError) ErrorName() string {
	return "VideoTranscodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VideoTranscodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoTranscodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoTranscodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoTranscodeResponseValidationError{}

// Validate checks the field values on VideoPlaybackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoPlaybackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoPlaybackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoPlaybackRequestMultiError, or nil if none found.
func (m *VideoPlaybackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoPlaybackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return VideoPlaybackRequestMultiError(errors)
	}

	return nil
}

// VideoPlaybackRequestMultiError is an error wrapping multiple validation
// errors returned by VideoPlaybackRequest.ValidateAll() if the designated
// constraints aren't met.
type VideoPlaybackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoPlaybackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoPlaybackRequestMultiError) AllErrors() []error { return m }

// VideoPlaybackRequestValidationError is the validation error returned by
// VideoPlaybackRequest.Validate if the designated constraints aren't met.
type VideoPlaybackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoPlaybackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoPlaybackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoPlaybackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoPlaybackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoPlaybackRequestValidationError) ErrorName() string {
	return "VideoPlaybackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VideoPlaybackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoPlaybackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoPlaybackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoPlaybackRequestValidationError{}

// Validate checks the field values on VideoPlaybackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoPlaybackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoPlaybackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoPlaybackResponseMultiError, or nil if none found.
func (m *VideoPlaybackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoPlaybackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlaybackUrl

	if len(errors) > 0 {
		return VideoPlaybackResponseMultiError(errors)
	}

	return nil
}

// VideoPlaybackResponseMultiError is an error wrapping multiple validation
// errors returned by VideoPlaybackResponse.ValidateAll() if the designated
// constraints aren't met.
type VideoPlaybackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoPlaybackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoPlaybackResponseMultiError) AllErrors() []error { return m }

// VideoPlaybackResponseValidationError is the validation error returned by
// VideoPlaybackResponse.Validate if the designated constraints aren't met.
type VideoPlaybackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoPlaybackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoPlaybackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoPlaybackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoPlaybackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoPlaybackResponseValidationError) ErrorName() string {
	return "VideoPlaybackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VideoPlaybackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoPlaybackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoPlaybackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoPlaybackResponseValidationError{}

// Validate checks the field values on VideoScreenshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoScreenshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoScreenshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoScreenshotRequestMultiError, or nil if none found.
func (m *VideoScreenshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoScreenshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return VideoScreenshotRequestMultiError(errors)
	}

	return nil
}

// VideoScreenshotRequestMultiError is an error wrapping multiple validation
// errors returned by VideoScreenshotRequest.ValidateAll() if the designated
// constraints aren't met.
type VideoScreenshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoScreenshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoScreenshotRequestMultiError) AllErrors() []error { return m }

// VideoScreenshotRequestValidationError is the validation error returned by
// VideoScreenshotRequest.Validate if the designated constraints aren't met.
type VideoScreenshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoScreenshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoScreenshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoScreenshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoScreenshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoScreenshotRequestValidationError) ErrorName() string {
	return "VideoScreenshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VideoScreenshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoScreenshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoScreenshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoScreenshotRequestValidationError{}

// Validate checks the field values on VideoScreenshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoScreenshotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoScreenshotResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoScreenshotResponseMultiError, or nil if none found.
func (m *VideoScreenshotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoScreenshotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScreenshotUrl

	if len(errors) > 0 {
		return VideoScreenshotResponseMultiError(errors)
	}

	return nil
}

// VideoScreenshotResponseMultiError is an error wrapping multiple validation
// errors returned by VideoScreenshotResponse.ValidateAll() if the designated
// constraints aren't met.
type VideoScreenshotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoScreenshotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoScreenshotResponseMultiError) AllErrors() []error { return m }

// VideoScreenshotResponseValidationError is the validation error returned by
// VideoScreenshotResponse.Validate if the designated constraints aren't met.
type VideoScreenshotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoScreenshotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoScreenshotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoScreenshotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoScreenshotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoScreenshotResponseValidationError) ErrorName() string {
	return "VideoScreenshotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VideoScreenshotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoScreenshotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoScreenshotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoScreenshotResponseValidationError{}
