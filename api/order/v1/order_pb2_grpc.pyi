"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import api.order.v1.order_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class OrderServiceStub:
    """订单管理服务接口"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateOrder: grpc.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.CreateOrderRequest,
        api.order.v1.order_pb2.CreateOrderResponse,
    ]
    """创建订单"""
    GetOrder: grpc.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.GetOrderRequest,
        api.order.v1.order_pb2.GetOrderResponse,
    ]
    """查询订单"""
    UpdateOrderStatus: grpc.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.UpdateOrderStatusRequest,
        api.order.v1.order_pb2.UpdateOrderStatusResponse,
    ]
    """更新订单状态"""
    PayOrder: grpc.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.PayOrderRequest,
        api.order.v1.order_pb2.PayOrderResponse,
    ]
    """支付订单"""
    DeleteOrder: grpc.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.DeleteOrderRequest,
        api.order.v1.order_pb2.DeleteOrderResponse,
    ]
    """删除订单"""
    ListOrders: grpc.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.ListOrdersRequest,
        api.order.v1.order_pb2.ListOrdersResponse,
    ]
    """查询订单列表"""
    CancelOrder: grpc.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.CancelOrderRequest,
        api.order.v1.order_pb2.CancelOrderResponse,
    ]
    """取消订单"""

class OrderServiceAsyncStub:
    """订单管理服务接口"""

    CreateOrder: grpc.aio.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.CreateOrderRequest,
        api.order.v1.order_pb2.CreateOrderResponse,
    ]
    """创建订单"""
    GetOrder: grpc.aio.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.GetOrderRequest,
        api.order.v1.order_pb2.GetOrderResponse,
    ]
    """查询订单"""
    UpdateOrderStatus: grpc.aio.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.UpdateOrderStatusRequest,
        api.order.v1.order_pb2.UpdateOrderStatusResponse,
    ]
    """更新订单状态"""
    PayOrder: grpc.aio.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.PayOrderRequest,
        api.order.v1.order_pb2.PayOrderResponse,
    ]
    """支付订单"""
    DeleteOrder: grpc.aio.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.DeleteOrderRequest,
        api.order.v1.order_pb2.DeleteOrderResponse,
    ]
    """删除订单"""
    ListOrders: grpc.aio.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.ListOrdersRequest,
        api.order.v1.order_pb2.ListOrdersResponse,
    ]
    """查询订单列表"""
    CancelOrder: grpc.aio.UnaryUnaryMultiCallable[
        api.order.v1.order_pb2.CancelOrderRequest,
        api.order.v1.order_pb2.CancelOrderResponse,
    ]
    """取消订单"""

class OrderServiceServicer(metaclass=abc.ABCMeta):
    """订单管理服务接口"""

    @abc.abstractmethod
    def CreateOrder(
        self,
        request: api.order.v1.order_pb2.CreateOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.order.v1.order_pb2.CreateOrderResponse, collections.abc.Awaitable[api.order.v1.order_pb2.CreateOrderResponse]]:
        """创建订单"""
    @abc.abstractmethod
    def GetOrder(
        self,
        request: api.order.v1.order_pb2.GetOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.order.v1.order_pb2.GetOrderResponse, collections.abc.Awaitable[api.order.v1.order_pb2.GetOrderResponse]]:
        """查询订单"""
    @abc.abstractmethod
    def UpdateOrderStatus(
        self,
        request: api.order.v1.order_pb2.UpdateOrderStatusRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.order.v1.order_pb2.UpdateOrderStatusResponse, collections.abc.Awaitable[api.order.v1.order_pb2.UpdateOrderStatusResponse]]:
        """更新订单状态"""
    @abc.abstractmethod
    def PayOrder(
        self,
        request: api.order.v1.order_pb2.PayOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.order.v1.order_pb2.PayOrderResponse, collections.abc.Awaitable[api.order.v1.order_pb2.PayOrderResponse]]:
        """支付订单"""
    @abc.abstractmethod
    def DeleteOrder(
        self,
        request: api.order.v1.order_pb2.DeleteOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.order.v1.order_pb2.DeleteOrderResponse, collections.abc.Awaitable[api.order.v1.order_pb2.DeleteOrderResponse]]:
        """删除订单"""
    @abc.abstractmethod
    def ListOrders(
        self,
        request: api.order.v1.order_pb2.ListOrdersRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.order.v1.order_pb2.ListOrdersResponse, collections.abc.Awaitable[api.order.v1.order_pb2.ListOrdersResponse]]:
        """查询订单列表"""
    @abc.abstractmethod
    def CancelOrder(
        self,
        request: api.order.v1.order_pb2.CancelOrderRequest,
        context: _ServicerContext,
    ) -> typing.Union[api.order.v1.order_pb2.CancelOrderResponse, collections.abc.Awaitable[api.order.v1.order_pb2.CancelOrderResponse]]:
        """取消订单"""

def add_OrderServiceServicer_to_server(servicer: OrderServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
