// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: api/order/v1/order.proto

package orderv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderServiceCancelOrder = "/orderv1.OrderService/CancelOrder"
const OperationOrderServiceCreateOrder = "/orderv1.OrderService/CreateOrder"
const OperationOrderServiceDeleteOrder = "/orderv1.OrderService/DeleteOrder"
const OperationOrderServiceGetOrder = "/orderv1.OrderService/GetOrder"
const OperationOrderServiceListOrders = "/orderv1.OrderService/ListOrders"
const OperationOrderServicePayOrder = "/orderv1.OrderService/PayOrder"
const OperationOrderServiceUpdateOrderStatus = "/orderv1.OrderService/UpdateOrderStatus"

type OrderServiceHTTPServer interface {
	// CancelOrder 取消订单
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// CreateOrder 创建订单
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	// DeleteOrder 删除订单
	DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderResponse, error)
	// GetOrder 查询订单
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// ListOrders 查询订单列表
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// PayOrder 支付订单
	PayOrder(context.Context, *PayOrderRequest) (*PayOrderResponse, error)
	// UpdateOrderStatus 更新订单状态
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
}

func RegisterOrderServiceHTTPServer(s *http.Server, srv OrderServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/orders", _OrderService_CreateOrder0_HTTP_Handler(srv))
	r.GET("/api/v1/orders/{order_number}", _OrderService_GetOrder0_HTTP_Handler(srv))
	r.PUT("/api/v1/orders/status", _OrderService_UpdateOrderStatus0_HTTP_Handler(srv))
	r.POST("/api/v1/orders/pay", _OrderService_PayOrder0_HTTP_Handler(srv))
	r.DELETE("/api/v1/orders/{order_number}", _OrderService_DeleteOrder0_HTTP_Handler(srv))
	r.GET("/api/v1/orders", _OrderService_ListOrders0_HTTP_Handler(srv))
	r.POST("/api/v1/orders/cancel", _OrderService_CancelOrder0_HTTP_Handler(srv))
}

func _OrderService_CreateOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderService_GetOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceGetOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderService_UpdateOrderStatus0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrderStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceUpdateOrderStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrderStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderService_PayOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServicePayOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PayOrder(ctx, req.(*PayOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderService_DeleteOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceDeleteOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrder(ctx, req.(*DeleteOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderService_ListOrders0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrdersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceListOrders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrders(ctx, req.(*ListOrdersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrdersResponse)
		return ctx.Result(200, reply)
	}
}

func _OrderService_CancelOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceCancelOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelOrder(ctx, req.(*CancelOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelOrderResponse)
		return ctx.Result(200, reply)
	}
}

type OrderServiceHTTPClient interface {
	CancelOrder(ctx context.Context, req *CancelOrderRequest, opts ...http.CallOption) (rsp *CancelOrderResponse, err error)
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http.CallOption) (rsp *CreateOrderResponse, err error)
	DeleteOrder(ctx context.Context, req *DeleteOrderRequest, opts ...http.CallOption) (rsp *DeleteOrderResponse, err error)
	GetOrder(ctx context.Context, req *GetOrderRequest, opts ...http.CallOption) (rsp *GetOrderResponse, err error)
	ListOrders(ctx context.Context, req *ListOrdersRequest, opts ...http.CallOption) (rsp *ListOrdersResponse, err error)
	PayOrder(ctx context.Context, req *PayOrderRequest, opts ...http.CallOption) (rsp *PayOrderResponse, err error)
	UpdateOrderStatus(ctx context.Context, req *UpdateOrderStatusRequest, opts ...http.CallOption) (rsp *UpdateOrderStatusResponse, err error)
}

type OrderServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderServiceHTTPClient(client *http.Client) OrderServiceHTTPClient {
	return &OrderServiceHTTPClientImpl{client}
}

func (c *OrderServiceHTTPClientImpl) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...http.CallOption) (*CancelOrderResponse, error) {
	var out CancelOrderResponse
	pattern := "/api/v1/orders/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceCancelOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http.CallOption) (*CreateOrderResponse, error) {
	var out CreateOrderResponse
	pattern := "/api/v1/orders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...http.CallOption) (*DeleteOrderResponse, error) {
	var out DeleteOrderResponse
	pattern := "/api/v1/orders/{order_number}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderServiceDeleteOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...http.CallOption) (*GetOrderResponse, error) {
	var out GetOrderResponse
	pattern := "/api/v1/orders/{order_number}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderServiceGetOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...http.CallOption) (*ListOrdersResponse, error) {
	var out ListOrdersResponse
	pattern := "/api/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderServiceListOrders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...http.CallOption) (*PayOrderResponse, error) {
	var out PayOrderResponse
	pattern := "/api/v1/orders/pay"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServicePayOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...http.CallOption) (*UpdateOrderStatusResponse, error) {
	var out UpdateOrderStatusResponse
	pattern := "/api/v1/orders/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceUpdateOrderStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
