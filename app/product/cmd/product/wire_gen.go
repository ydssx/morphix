// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/ydssx/morphix/app/product/internal/biz"
	"github.com/ydssx/morphix/app/product/internal/data"
	"github.com/ydssx/morphix/app/product/internal/server"
	"github.com/ydssx/morphix/app/product/internal/service"
	"github.com/ydssx/morphix/common/conf"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	client, err := data.NewRedisCLient(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	db, err := data.NewMysqlDB(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(logger, client, db)
	if err != nil {
		return nil, nil, err
	}
	productRepo := data.NewProductRepo(dataData)
	productUseCase := biz.NewProductUseCase(productRepo)
	productService := service.NewProductService(productUseCase)
	httpServer := server.NewHTTPServer(bootstrap, productService)
	grpcServer := server.NewGRPCServer(bootstrap, productService)
	v, err := server.NewServer(httpServer, grpcServer, bootstrap)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(bootstrap, v...)
	return app, func() {
		cleanup()
	}, nil
}
