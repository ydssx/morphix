// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/ydssx/morphix/app/order/internal/biz"
	"github.com/ydssx/morphix/app/order/internal/data"
	"github.com/ydssx/morphix/app/order/internal/server"
	"github.com/ydssx/morphix/app/order/internal/service"
	"github.com/ydssx/morphix/common"
	"github.com/ydssx/morphix/common/conf"
	"github.com/ydssx/morphix/pkg/lock"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	client, err := data.NewRedisCLient(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	db, err := data.NewMysqlDB(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(logger, client, db)
	if err != nil {
		return nil, nil, err
	}
	transaction := data.NewTransaction(dataData)
	orderRepo := data.NewOrderRepo(dataData)
	redisLocker := lock.NewLocker(client)
	productServiceClient := common.NewProductClient(bootstrap)
	paymentServiceClient := common.NewPaymentClient(bootstrap)
	quoteServiceClient := common.NewQuoteClient(bootstrap)
	jobServiceClient := common.NewJobClient(bootstrap)
	orderUseCase := biz.NewOrderUseCase(transaction, orderRepo, redisLocker, productServiceClient, paymentServiceClient, quoteServiceClient, jobServiceClient)
	orderService := service.NewOrderService(orderUseCase)
	httpServer := server.NewHTTPServer(bootstrap, orderService)
	grpcServer := server.NewGRPCServer(bootstrap, orderService)
	v, err := server.NewServer(httpServer, grpcServer, bootstrap)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(bootstrap, v...)
	return app, func() {
		cleanup()
	}, nil
}
